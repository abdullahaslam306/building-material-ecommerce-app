/*! Summernote v0.8.2 | (c) 2013-2015 Alan Hong and other contributors | MIT license */
!(function (a) { typeof define === 'function' && define.amd ? define(['jquery'], a) : typeof module === 'object' && module.exports ? module.exports = a(require('jquery')) : a(window.jQuery); }(($) => {
  const func = (function () {
    const a = function (a) { return function (b) { return a === b; }; }; const b = function (a, b) { return a === b; }; const c = function (a) { return function (b, c) { return b[a] === c[a]; }; }; const d = function () { return !0; }; const e = function () { return !1; }; const f = function (a) { return function () { return !a.apply(a, arguments); }; }; const g = function (a, b) { return function (c) { return a(c) && b(c); }; }; const h = function (a) { return a; }; const i = function (a, b) { return function () { return a[b].apply(a, arguments); }; }; let j = 0; const k = function (a) { const b = `${++j}`; return a ? a + b : b; }; const l = function (a) {
      const b = $(document); return {
        top: a.top + b.scrollTop(), left: a.left + b.scrollLeft(), width: a.right - a.left, height: a.bottom - a.top,
      };
    }; const m = function (a) { const b = {}; for (const c in a)a.hasOwnProperty(c) && (b[a[c]] = c); return b; }; const n = function (a, b) { return b = b || '', b + a.split('.').map((a) => a.substring(0, 1).toUpperCase() + a.substring(1)).join(''); }; return {
      eq: a, eq2: b, peq2: c, ok: d, fail: e, self: h, not: f, and: g, invoke: i, uniqueId: k, rect2bnd: l, invertObject: m, namespaceToCamel: n,
    };
  }()); const list = (function () {
    const a = function (a) { return a[0]; }; const b = function (a) { return a[a.length - 1]; }; const c = function (a) { return a.slice(0, a.length - 1); }; const d = function (a) { return a.slice(1); }; const e = function (a, b) { for (let c = 0, d = a.length; d > c; c++) { const e = a[c]; if (b(e)) return e; } }; const f = function (a, b) { for (let c = 0, d = a.length; d > c; c++) if (!b(a[c])) return !1; return !0; }; const g = function (a, b) { return $.inArray(b, a); }; const h = function (a, b) { return g(a, b) !== -1; }; const i = function (a, b) { return b = b || func.self, a.reduce((a, c) => a + b(c), 0); }; const j = function (a) { for (var b = [], c = -1, d = a.length; ++c < d;)b[c] = a[c]; return b; }; const k = function (a) { return !a || !a.length; }; const l = function (c, e) { if (!c.length) return []; const f = d(c); return f.reduce((a, c) => { const d = b(a); return e(b(d), c) ? d[d.length] = c : a[a.length] = [c], a; }, [[a(c)]]); }; const m = function (a) { for (var b = [], c = 0, d = a.length; d > c; c++)a[c] && b.push(a[c]); return b; }; const n = function (a) { for (var b = [], c = 0, d = a.length; d > c; c++)h(b, a[c]) || b.push(a[c]); return b; }; const o = function (a, b) { const c = g(a, b); return c === -1 ? null : a[c + 1]; }; const p = function (a, b) { const c = g(a, b); return c === -1 ? null : a[c - 1]; }; return {
      head: a, last: b, initial: c, tail: d, prev: p, next: o, find: e, contains: h, all: f, sum: i, from: j, isEmpty: k, clusterBy: l, compact: m, unique: n,
    };
  }()); const isSupportAmd = typeof define === 'function' && define.amd; const isFontInstalled = function (a) {
    const b = a === 'Comic Sans MS' ? 'Courier New' : 'Comic Sans MS'; const c = $('<div>').css({
      position: 'absolute', left: '-9999px', top: '-9999px', fontSize: '200px',
    }).text('mmmmmmmmmwwwwwww').appendTo(document.body); const d = c.css('fontFamily', b).width(); const e = c.css('fontFamily', `${a},${b}`).width(); return c.remove(), d !== e;
  }; const { userAgent } = navigator; const isMSIE = /MSIE|Trident/i.test(userAgent); let browserVersion; if (isMSIE) { let matches = /MSIE (\d+[.]\d+)/.exec(userAgent); matches && (browserVersion = parseFloat(matches[1])), matches = /Trident\/.*rv:([0-9]{1,}[\.0-9]{0,})/.exec(userAgent), matches && (browserVersion = parseFloat(matches[1])); } const isEdge = /Edge\/\d+/.test(userAgent); let hasCodeMirror = !!window.CodeMirror; if (!hasCodeMirror && isSupportAmd && typeof require !== 'undefined') if (typeof require.resolve !== 'undefined') try { require.resolve('codemirror'), hasCodeMirror = !0; } catch (e) {} else typeof eval('require').specified !== 'undefined' && (hasCodeMirror = eval('require').specified('codemirror')); const agent = {
    isMac: navigator.appVersion.indexOf('Mac') > -1, isMSIE, isEdge, isFF: !isEdge && /firefox/i.test(userAgent), isPhantom: /PhantomJS/i.test(userAgent), isWebkit: !isEdge && /webkit/i.test(userAgent), isChrome: !isEdge && /chrome/i.test(userAgent), isSafari: !isEdge && /safari/i.test(userAgent), browserVersion, jqueryVersion: parseFloat($.fn.jquery), isSupportAmd, hasCodeMirror, isFontInstalled, isW3CRangeSupport: !!document.createRange,
  }; const NBSP_CHAR = String.fromCharCode(160); const ZERO_WIDTH_NBSP_CHAR = '\ufeff'; var dom = (function () {
    const a = function (a) { return a && $(a).hasClass('note-editable'); }; const b = function (a) { return a && $(a).hasClass('note-control-sizing'); }; const c = function (a) { return a = a.toUpperCase(), function (b) { return b && b.nodeName.toUpperCase() === a; }; }; const d = function (a) { return a && a.nodeType === 3; }; const e = function (a) { return a && a.nodeType === 1; }; const f = function (a) { return a && /^BR|^IMG|^HR|^IFRAME|^BUTTON/.test(a.nodeName.toUpperCase()); }; const g = function (b) { return a(b) ? !1 : b && /^DIV|^P|^LI|^H[1-7]/.test(b.nodeName.toUpperCase()); }; const h = function (a) { return a && /^H[1-7]/.test(a.nodeName.toUpperCase()); }; const i = c('PRE'); const j = c('LI'); const k = function (a) { return g(a) && !j(a); }; const l = c('TABLE'); const m = c('DATA'); const n = function (a) { return !(s(a) || o(a) || p(a) || g(a) || l(a) || r(a) || m(a)); }; var o = function (a) { return a && /^UL|^OL/.test(a.nodeName.toUpperCase()); }; var p = c('HR'); const q = function (a) { return a && /^TD|^TH/.test(a.nodeName.toUpperCase()); }; var r = c('BLOCKQUOTE'); var s = function (b) { return q(b) || r(b) || a(b); }; const t = c('A'); const u = function (a) { return n(a) && !!D(a, g); }; const v = function (a) { return n(a) && !D(a, g); }; const w = c('BODY'); const x = function (a, b) { return a.nextSibling === b || a.previousSibling === b; }; const y = function (a, b) { b = b || func.ok; const c = []; return a.previousSibling && b(a.previousSibling) && c.push(a.previousSibling), c.push(a), a.nextSibling && b(a.nextSibling) && c.push(a.nextSibling), c; }; const z = agent.isMSIE && agent.browserVersion < 11 ? '&nbsp;' : '<br>'; const A = function (a) { return d(a) ? a.nodeValue.length : a ? a.childNodes.length : 0; }; const B = function (a) { const b = A(a); return b === 0 ? !0 : d(a) || b !== 1 || a.innerHTML !== z ? list.all(a.childNodes, d) && a.innerHTML === '' ? !0 : !1 : !0; }; const C = function (a) { f(a) || A(a) || (a.innerHTML = z); }; var D = function (b, c) { for (;b;) { if (c(b)) return b; if (a(b)) break; b = b.parentNode; } return null; }; const E = function (b, c) { for (b = b.parentNode; b && A(b) === 1;) { if (c(b)) return b; if (a(b)) break; b = b.parentNode; } return null; }; const F = function (b, c) { c = c || func.fail; const d = []; return D(b, (b) => (a(b) || d.push(b), c(b))), d; }; const G = function (a, b) { const c = F(a); return list.last(c.filter(b)); }; const H = function (a, b) { for (let c = F(a), d = b; d; d = d.parentNode) if ($.inArray(d, c) > -1) return d; return null; }; const I = function (a, b) { b = b || func.fail; for (var c = []; a && !b(a);)c.push(a), a = a.previousSibling; return c; }; const J = function (a, b) { b = b || func.fail; for (var c = []; a && !b(a);)c.push(a), a = a.nextSibling; return c; }; const K = function (a, b) { const c = []; return b = b || func.ok, (function d(e) { a !== e && b(e) && c.push(e); for (let f = 0, g = e.childNodes.length; g > f; f++)d(e.childNodes[f]); }(a)), c; }; const L = function (a, b) { const c = a.parentNode; const d = $(`<${b}>`)[0]; return c.insertBefore(d, a), d.appendChild(a), d; }; const M = function (a, b) { const c = b.nextSibling; const d = b.parentNode; return c ? d.insertBefore(a, c) : d.appendChild(a), a; }; const N = function (a, b) { return $.each(b, (b, c) => { a.appendChild(c); }), a; }; const O = function (a) { return a.offset === 0; }; const P = function (a) { return a.offset === A(a.node); }; const Q = function (a) { return O(a) || P(a); }; const R = function (a, b) { for (;a && a !== b;) { if (V(a) !== 0) return !1; a = a.parentNode; } return !0; }; const S = function (a, b) { if (!b) return !1; for (;a && a !== b;) { if (V(a) !== A(a.parentNode) - 1) return !1; a = a.parentNode; } return !0; }; const T = function (a, b) { return O(a) && R(a.node, b); }; const U = function (a, b) { return P(a) && S(a.node, b); }; var V = function (a) { for (var b = 0; a = a.previousSibling;)b += 1; return b; }; const W = function (a) { return !!(a && a.childNodes && a.childNodes.length); }; const X = function (b, c) { let d; let e; if (b.offset === 0) { if (a(b.node)) return null; d = b.node.parentNode, e = V(b.node); } else W(b.node) ? (d = b.node.childNodes[b.offset - 1], e = A(d)) : (d = b.node, e = c ? 0 : b.offset - 1); return { node: d, offset: e }; }; const Y = function (b, c) { let d; let e; if (A(b.node) === b.offset) { if (a(b.node)) return null; d = b.node.parentNode, e = V(b.node) + 1; } else W(b.node) ? (d = b.node.childNodes[b.offset], e = 0) : (d = b.node, e = c ? A(b.node) : b.offset + 1); return { node: d, offset: e }; }; const Z = function (a, b) { return a.node === b.node && a.offset === b.offset; }; const _ = function (a) { if (d(a.node) || !W(a.node) || B(a.node)) return !0; const b = a.node.childNodes[a.offset - 1]; const c = a.node.childNodes[a.offset]; return b && !f(b) || c && !f(c) ? !1 : !0; }; const aa = function (a, b) { for (;a;) { if (b(a)) return a; a = X(a); } return null; }; const ba = function (a, b) { for (;a;) { if (b(a)) return a; a = Y(a); } return null; }; const ca = function (a) { if (!d(a.node)) return !1; const b = a.node.nodeValue.charAt(a.offset - 1); return b && b !== ' ' && b !== NBSP_CHAR; }; const da = function (a, b, c, d) { for (let e = a; e && (c(e), !Z(e, b));) { const f = d && a.node !== e.node && b.node !== e.node; e = Y(e, f); } }; const ea = function (a, b) { const c = F(b, func.eq(a)); return c.map(V).reverse(); }; const fa = function (a, b) { for (var c = a, d = 0, e = b.length; e > d; d++)c = c.childNodes.length <= b[d] ? c.childNodes[c.childNodes.length - 1] : c.childNodes[b[d]]; return c; }; const ga = function (a, b) { const c = b && b.isSkipPaddingBlankHTML; const e = b && b.isNotSplitEdgePoint; if (Q(a) && (d(a.node) || e)) { if (O(a)) return a.node; if (P(a)) return a.node.nextSibling; } if (d(a.node)) return a.node.splitText(a.offset); const f = a.node.childNodes[a.offset]; const g = M(a.node.cloneNode(!1), a.node); return N(g, J(f)), c || (C(a.node), C(g)), g; }; const ha = function (a, b, c) { const d = F(b.node, func.eq(a)); return d.length ? d.length === 1 ? ga(b, c) : d.reduce((a, d) => (a === b.node && (a = ga(b, c)), ga({ node: d, offset: a ? dom.position(a) : A(d) }, c))) : null; }; const ia = function (a, b) { let c; let d; const e = b ? g : s; const f = F(a.node, e); const h = list.last(f) || a.node; e(h) ? (c = f[f.length - 2], d = h) : (c = h, d = c.parentNode); let i = c && ha(c, a, { isSkipPaddingBlankHTML: b, isNotSplitEdgePoint: b }); return i || d !== a.node || (i = a.node.childNodes[a.offset]), { rightNode: i, container: d }; }; const ja = function (a) { return document.createElement(a); }; const ka = function (a) { return document.createTextNode(a); }; const la = function (a, b) { if (a && a.parentNode) { if (a.removeNode) return a.removeNode(b); const c = a.parentNode; if (!b) { let d; let e; const f = []; for (d = 0, e = a.childNodes.length; e > d; d++)f.push(a.childNodes[d]); for (d = 0, e = f.length; e > d; d++)c.insertBefore(f[d], a); }c.removeChild(a); } }; const ma = function (b, c) { for (;b && !a(b) && c(b);) { const d = b.parentNode; la(b), b = d; } }; const na = function (a, b) { if (a.nodeName.toUpperCase() === b.toUpperCase()) return a; const c = ja(b); return a.style.cssText && (c.style.cssText = a.style.cssText), N(c, list.from(a.childNodes)), M(c, a), la(a), c; }; const oa = c('TEXTAREA'); const pa = function (a, b) { const c = oa(a[0]) ? a.val() : a.html(); return b ? c.replace(/[\n\r]/g, '') : c; }; const qa = function (a, b) { let c = pa(a); if (b) { const d = /<(\/?)(\b(?!!)[^>\s]*)(.*?)(\s*\/?>)/g; c = c.replace(d, (a, b, c) => { c = c.toUpperCase(); const d = /^DIV|^TD|^TH|^P|^LI|^H[1-7]/.test(c) && !!b; const e = /^BLOCKQUOTE|^TABLE|^TBODY|^TR|^HR|^UL|^OL/.test(c); return a + (d || e ? '\n' : ''); }), c = $.trim(c); } return c; }; const ra = function (a) { const b = $(a); const c = b.offset(); const d = b.outerHeight(!0); return { left: c.left, top: c.top + d }; }; const sa = function (a, b) { Object.keys(b).forEach((c) => { a.on(c, b[c]); }); }; const ta = function (a, b) { Object.keys(b).forEach((c) => { a.off(c, b[c]); }); }; return {
      NBSP_CHAR, ZERO_WIDTH_NBSP_CHAR, blank: z, emptyPara: `<p>${z}</p>`, makePredByNodeName: c, isEditable: a, isControlSizing: b, isText: d, isElement: e, isVoid: f, isPara: g, isPurePara: k, isHeading: h, isInline: n, isBlock: func.not(n), isBodyInline: v, isBody: w, isParaInline: u, isPre: i, isList: o, isTable: l, isData: m, isCell: q, isBlockquote: r, isBodyContainer: s, isAnchor: t, isDiv: c('DIV'), isLi: j, isBR: c('BR'), isSpan: c('SPAN'), isB: c('B'), isU: c('U'), isS: c('S'), isI: c('I'), isImg: c('IMG'), isTextarea: oa, isEmpty: B, isEmptyAnchor: func.and(t, B), isClosestSibling: x, withClosestSiblings: y, nodeLength: A, isLeftEdgePoint: O, isRightEdgePoint: P, isEdgePoint: Q, isLeftEdgeOf: R, isRightEdgeOf: S, isLeftEdgePointOf: T, isRightEdgePointOf: U, prevPoint: X, nextPoint: Y, isSamePoint: Z, isVisiblePoint: _, prevPointUntil: aa, nextPointUntil: ba, isCharPoint: ca, walkPoint: da, ancestor: D, singleChildAncestor: E, listAncestor: F, lastAncestor: G, listNext: J, listPrev: I, listDescendant: K, commonAncestor: H, wrap: L, insertAfter: M, appendChildNodes: N, position: V, hasChildren: W, makeOffsetPath: ea, fromOffsetPath: fa, splitTree: ha, splitPoint: ia, create: ja, createText: ka, remove: la, removeWhile: ma, replace: na, html: qa, value: pa, posFromPlaceholder: ra, attachEvents: sa, detachEvents: ta,
    };
  }()); const Context = function (a, b) { const c = this; const d = $.summernote.ui; return this.memos = {}, this.modules = {}, this.layoutInfo = {}, this.options = b, this.initialize = function () { return this.layoutInfo = d.createLayout(a, b), this._initialize(), a.hide(), this; }, this.destroy = function () { this._destroy(), a.removeData('summernote'), d.removeLayout(a, this.layoutInfo); }, this.reset = function () { const a = c.isDisabled(); this.code(dom.emptyPara), this._destroy(), this._initialize(), a && c.disable(); }, this._initialize = function () { const a = $.extend({}, this.options.buttons); Object.keys(a).forEach((b) => { c.memo(`button.${b}`, a[b]); }); const b = $.extend({}, this.options.modules, $.summernote.plugins || {}); Object.keys(b).forEach((a) => { c.module(a, b[a], !0); }), Object.keys(this.modules).forEach((a) => { c.initializeModule(a); }); }, this._destroy = function () { Object.keys(this.modules).reverse().forEach((a) => { c.removeModule(a); }), Object.keys(this.memos).forEach((a) => { c.removeMemo(a); }); }, this.code = function (b) { const c = this.invoke('codeview.isActivated'); return void 0 === b ? (this.invoke('codeview.sync'), c ? this.layoutInfo.codable.val() : this.layoutInfo.editable.html()) : (c ? this.layoutInfo.codable.val(b) : this.layoutInfo.editable.html(b), a.val(b), this.triggerEvent('change', b), void 0); }, this.isDisabled = function () { return this.layoutInfo.editable.attr('contenteditable') === 'false'; }, this.enable = function () { this.layoutInfo.editable.attr('contenteditable', !0), this.invoke('toolbar.activate', !0); }, this.disable = function () { this.invoke('codeview.isActivated') && this.invoke('codeview.deactivate'), this.layoutInfo.editable.attr('contenteditable', !1), this.invoke('toolbar.deactivate', !0); }, this.triggerEvent = function () { const b = list.head(arguments); const c = list.tail(list.from(arguments)); const d = this.options.callbacks[func.namespaceToCamel(b, 'on')]; d && d.apply(a[0], c), a.trigger(`summernote.${b}`, c); }, this.initializeModule = function (b) { const c = this.modules[b]; c.shouldInitialize = c.shouldInitialize || func.ok, c.shouldInitialize() && (c.initialize && c.initialize(), c.events && dom.attachEvents(a, c.events)); }, this.module = function (a, b, c) { return arguments.length === 1 ? this.modules[a] : (this.modules[a] = new b(this), void (c || this.initializeModule(a))); }, this.removeModule = function (b) { const c = this.modules[b]; c.shouldInitialize() && (c.events && dom.detachEvents(a, c.events), c.destroy && c.destroy()), delete this.modules[b]; }, this.memo = function (a, b) { return arguments.length === 1 ? this.memos[a] : void (this.memos[a] = b); }, this.removeMemo = function (a) { this.memos[a] && this.memos[a].destroy && this.memos[a].destroy(), delete this.memos[a]; }, this.createInvokeHandler = function (a, b) { return function (d) { d.preventDefault(), c.invoke(a, b || $(d.target).closest('[data-value]').data('value')); }; }, this.invoke = function () { const a = list.head(arguments); const b = list.tail(list.from(arguments)); const c = a.split('.'); const d = c.length > 1; const e = d && list.head(c); const f = d ? list.last(c) : list.head(c); const g = this.modules[e || 'editor']; return !e && this[f] ? this[f].apply(this, b) : g && g[f] && g.shouldInitialize() ? g[f].apply(g, b) : void 0; }, this.initialize(); }; $.fn.extend({ summernote() { const a = $.type(list.head(arguments)); const b = a === 'string'; const c = a === 'object'; let d = c ? list.head(arguments) : {}; d = $.extend({}, $.summernote.options, d), d.langInfo = $.extend(!0, {}, $.summernote.lang['en-US'], $.summernote.lang[d.lang]), d.icons = $.extend(!0, {}, $.summernote.options.icons, d.icons), this.each((a, b) => { const c = $(b); if (!c.data('summernote')) { const e = new Context(c, d); c.data('summernote', e), c.data('summernote').triggerEvent('init', e.layoutInfo); } }); const e = this.first(); if (e.length) { const f = e.data('summernote'); if (b) return f.invoke.apply(f, list.from(arguments)); d.focus && f.invoke('editor.focus'); } return this; } }); const Renderer = function (a, b, c, d) { this.render = function (e) { const f = $(a); if (c && c.contents && f.html(c.contents), c && c.className && f.addClass(c.className), c && c.data && $.each(c.data, (a, b) => { f.attr(`data-${a}`, b); }), c && c.click && f.on('click', c.click), b) { const g = f.find('.note-children-container'); b.forEach((a) => { a.render(g.length ? g : f); }); } return d && d(f, c), c && c.callback && c.callback(f), e && e.append(f), f; }; }; const renderer = { create(a, b) { return function () { let c = $.isArray(arguments[0]) ? arguments[0] : []; const d = typeof arguments[1] === 'object' ? arguments[1] : arguments[0]; return d && d.children && (c = d.children), new Renderer(a, c, d, b); }; } }; const editor = renderer.create('<div class="note-editor note-frame panel panel-default"/>'); const toolbar = renderer.create('<div class="note-toolbar panel-heading"/>'); const editingArea = renderer.create('<div class="note-editing-area"/>'); const codable = renderer.create('<textarea class="note-codable"/>'); const editable = renderer.create('<div class="note-editable panel-body" contentEditable="true"/>'); const statusbar = renderer.create(['<div class="note-statusbar">', '  <div class="note-resizebar">', '    <div class="note-icon-bar"/>', '    <div class="note-icon-bar"/>', '    <div class="note-icon-bar"/>', '  </div>', '</div>'].join('')); const airEditor = renderer.create('<div class="note-editor"/>'); const airEditable = renderer.create('<div class="note-editable" contentEditable="true"/>'); const buttonGroup = renderer.create('<div class="note-btn-group btn-group">'); const button = renderer.create('<button type="button" class="note-btn btn btn-default btn-sm" tabindex="-1">', (a, b) => { b && b.tooltip && a.attr({ title: b.tooltip }).tooltip({ container: 'body', trigger: 'hover', placement: 'bottom' }); }); const dropdown = renderer.create('<div class="dropdown-menu">', (a, b) => { const c = $.isArray(b.items) ? b.items.map((a) => { const c = typeof a === 'string' ? a : a.value || ''; const d = b.template ? b.template(a) : a; return `<li><a href="#" data-value="${c}">${d}</a></li>`; }).join('') : b.items; a.html(c); }); const dropdownCheck = renderer.create('<div class="dropdown-menu note-check">', (a, b) => { const c = $.isArray(b.items) ? b.items.map((a) => { const c = typeof a === 'string' ? a : a.value || ''; const d = b.template ? b.template(a) : a; return `<li><a href="#" data-value="${c}">${icon(b.checkClassName)} ${d}</a></li>`; }).join('') : b.items; a.html(c); }); const palette = renderer.create('<div class="note-color-palette"/>', (a, b) => { for (var c = [], d = 0, e = b.colors.length; e > d; d++) { for (var f = b.eventName, g = b.colors[d], h = [], i = 0, j = g.length; j > i; i++) { const k = g[i]; h.push(['<button type="button" class="note-color-btn"', 'style="background-color:', k, '" ', 'data-event="', f, '" ', 'data-value="', k, '" ', 'title="', k, '" ', 'data-toggle="button" tabindex="-1"></button>'].join('')); }c.push(`<div class="note-color-row">${h.join('')}</div>`); }a.html(c.join('')), a.find('.note-color-btn').tooltip({ container: 'body', trigger: 'hover', placement: 'bottom' }); }); const dialog = renderer.create('<div class="modal" aria-hidden="false" tabindex="-1"/>', (a, b) => { b.fade && a.addClass('fade'), a.html(['<div class="modal-dialog">', '  <div class="modal-content">', b.title ? `    <div class="modal-header">      <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>      <h4 class="modal-title">${b.title}</h4>    </div>` : '', `    <div class="modal-body">${b.body}</div>`, b.footer ? `    <div class="modal-footer">${b.footer}</div>` : '', '  </div>', '</div>'].join('')); }); const popover = renderer.create(['<div class="note-popover popover in">', '  <div class="arrow"/>', '  <div class="popover-content note-children-container"/>', '</div>'].join(''), (a, b) => { const c = typeof b.direction !== 'undefined' ? b.direction : 'bottom'; a.addClass(c), b.hideArrow && a.find('.arrow').hide(); }); var icon = function (a, b) { return b = b || 'i', `<${b} class="${a}"/>`; }; var ui = {
    editor,
    toolbar,
    editingArea,
    codable,
    editable,
    statusbar,
    airEditor,
    airEditable,
    buttonGroup,
    button,
    dropdown,
    dropdownCheck,
    palette,
    dialog,
    popover,
    icon,
    toggleBtn(a, b) { a.toggleClass('disabled', !b), a.attr('disabled', !b); },
    toggleBtnActive(a, b) { a.toggleClass('active', b); },
    onDialogShown(a, b) { a.one('shown.bs.modal', b); },
    onDialogHidden(a, b) { a.one('hidden.bs.modal', b); },
    showDialog(a) { a.modal('show'); },
    hideDialog(a) { a.modal('hide'); },
    createLayout(a, b) {
      const c = (b.airMode ? ui.airEditor([ui.editingArea([ui.airEditable()])]) : ui.editor([ui.toolbar(), ui.editingArea([ui.codable(), ui.editable()]), ui.statusbar()])).render(); return c.insertAfter(a), {
        note: a, editor: c, toolbar: c.find('.note-toolbar'), editingArea: c.find('.note-editing-area'), editable: c.find('.note-editable'), codable: c.find('.note-codable'), statusbar: c.find('.note-statusbar'),
      };
    },
    removeLayout(a, b) { a.html(b.editable.html()), b.editor.remove(), a.show(); },
  }; $.summernote = $.summernote || { lang: {} }, $.extend($.summernote.lang, {
    'en-US': {
      font: {
        bold: 'Bold', italic: 'Italic', underline: 'Underline', clear: 'Remove Font Style', height: 'Line Height', name: 'Font Family', strikethrough: 'Strikethrough', subscript: 'Subscript', superscript: 'Superscript', size: 'Font Size',
      },
      image: {
        image: 'Picture', insert: 'Insert Image', resizeFull: 'Resize Full', resizeHalf: 'Resize Half', resizeQuarter: 'Resize Quarter', floatLeft: 'Float Left', floatRight: 'Float Right', floatNone: 'Float None', shapeRounded: 'Shape: Rounded', shapeCircle: 'Shape: Circle', shapeThumbnail: 'Shape: Thumbnail', shapeNone: 'Shape: None', dragImageHere: 'Drag image or text here', dropImage: 'Drop image or Text', selectFromFiles: 'Select from files', maximumFileSize: 'Maximum file size', maximumFileSizeError: 'Maximum file size exceeded.', url: 'Image URL', remove: 'Remove Image',
      },
      video: {
        video: 'Video', videoLink: 'Video Link', insert: 'Insert Video', url: 'Video URL?', providers: '(YouTube, Vimeo, Vine, Instagram, DailyMotion or Youku)',
      },
      link: {
        link: 'Link', insert: 'Insert Link', unlink: 'Unlink', edit: 'Edit', textToDisplay: 'Text to display', url: 'To what URL should this link go?', openInNewWindow: 'Open in new window',
      },
      table: { table: 'Table' },
      hr: { insert: 'Insert Horizontal Rule' },
      style: {
        style: 'Style', normal: 'Normal', blockquote: 'Quote', pre: 'Code', h1: 'Header 1', h2: 'Header 2', h3: 'Header 3', h4: 'Header 4', h5: 'Header 5', h6: 'Header 6',
      },
      lists: { unordered: 'Unordered list', ordered: 'Ordered list' },
      options: { help: 'Help', fullscreen: 'Full Screen', codeview: 'Code View' },
      paragraph: {
        paragraph: 'Paragraph', outdent: 'Outdent', indent: 'Indent', left: 'Align left', center: 'Align center', right: 'Align right', justify: 'Justify full',
      },
      color: {
        recent: 'Recent Color', more: 'More Color', background: 'Background Color', foreground: 'Foreground Color', transparent: 'Transparent', setTransparent: 'Set transparent', reset: 'Reset', resetToDefault: 'Reset to default',
      },
      shortcut: {
        shortcuts: 'Keyboard shortcuts', close: 'Close', textFormatting: 'Text formatting', action: 'Action', paragraphFormatting: 'Paragraph formatting', documentStyle: 'Document Style', extraKeys: 'Extra keys',
      },
      help: {
        insertParagraph: 'Insert Paragraph', undo: 'Undoes the last command', redo: 'Redoes the last command', tab: 'Tab', untab: 'Untab', bold: 'Set a bold style', italic: 'Set a italic style', underline: 'Set a underline style', strikethrough: 'Set a strikethrough style', removeFormat: 'Clean a style', justifyLeft: 'Set left align', justifyCenter: 'Set center align', justifyRight: 'Set right align', justifyFull: 'Set full align', insertUnorderedList: 'Toggle unordered list', insertOrderedList: 'Toggle ordered list', outdent: 'Outdent on current paragraph', indent: 'Indent on current paragraph', formatPara: 'Change current block\'s format as a paragraph(P tag)', formatH1: 'Change current block\'s format as H1', formatH2: 'Change current block\'s format as H2', formatH3: 'Change current block\'s format as H3', formatH4: 'Change current block\'s format as H4', formatH5: 'Change current block\'s format as H5', formatH6: 'Change current block\'s format as H6', insertHorizontalRule: 'Insert horizontal rule', 'linkDialog.show': 'Show Link Dialog',
      },
      history: { undo: 'Undo', redo: 'Redo' },
      specialChar: { specialChar: 'SPECIAL CHARACTERS', select: 'Select Special characters' },
    },
  }); const key = (function () {
    const a = {
      BACKSPACE: 8, TAB: 9, ENTER: 13, SPACE: 32, LEFT: 37, UP: 38, RIGHT: 39, DOWN: 40, NUM0: 48, NUM1: 49, NUM2: 50, NUM3: 51, NUM4: 52, NUM5: 53, NUM6: 54, NUM7: 55, NUM8: 56, B: 66, E: 69, I: 73, J: 74, K: 75, L: 76, R: 82, S: 83, U: 85, V: 86, Y: 89, Z: 90, SLASH: 191, LEFTBRACKET: 219, BACKSLASH: 220, RIGHTBRACKET: 221,
    }; return {
      isEdit(b) { return list.contains([a.BACKSPACE, a.TAB, a.ENTER, a.SPACE], b); }, isMove(b) { return list.contains([a.LEFT, a.UP, a.RIGHT, a.DOWN], b); }, nameFromCode: func.invertObject(a), code: a,
    };
  }()); const range = (function () {
    const a = function (a, b) { let c; let d; let e = a.parentElement(); const f = document.body.createTextRange(); const g = list.from(e.childNodes); for (c = 0; c < g.length; c++) if (!dom.isText(g[c])) { if (f.moveToElementText(g[c]), f.compareEndPoints('StartToStart', a) >= 0) break; d = g[c]; } if (c !== 0 && dom.isText(g[c - 1])) { const h = document.body.createTextRange(); let i = null; h.moveToElementText(d || e), h.collapse(!d), i = d ? d.nextSibling : e.firstChild; const j = a.duplicate(); j.setEndPoint('StartToStart', h); for (var k = j.text.replace(/[\r\n]/g, '').length; k > i.nodeValue.length && i.nextSibling;)k -= i.nodeValue.length, i = i.nextSibling; i.nodeValue; b && i.nextSibling && dom.isText(i.nextSibling) && k === i.nodeValue.length && (k -= i.nodeValue.length, i = i.nextSibling), e = i, c = k; } return { cont: e, offset: c }; }; const b = function (a) { var b = function (a, c) { let d; let e; if (dom.isText(a)) { const f = dom.listPrev(a, func.not(dom.isText)); const g = list.last(f).previousSibling; d = g || a.parentNode, c += list.sum(list.tail(f), dom.nodeLength), e = !g; } else { if (d = a.childNodes[c] || a, dom.isText(d)) return b(d, 0); c = 0, e = !1; } return { node: d, collapseToStart: e, offset: c }; }; const c = document.body.createTextRange(); const d = b(a.node, a.offset); return c.moveToElementText(d.node), c.collapse(d.collapseToStart), c.moveStart('character', d.offset), c; }; var c = function (a, d, e, f) {
      this.sc = a, this.so = d, this.ec = e, this.eo = f; const g = function () { if (agent.isW3CRangeSupport) { const c = document.createRange(); return c.setStart(a, d), c.setEnd(e, f), c; } const g = b({ node: a, offset: d }); return g.setEndPoint('EndToEnd', b({ node: e, offset: f })), g; }; this.getPoints = function () {
        return {
          sc: a, so: d, ec: e, eo: f,
        };
      }, this.getStartPoint = function () { return { node: a, offset: d }; }, this.getEndPoint = function () { return { node: e, offset: f }; }, this.select = function () { const a = g(); if (agent.isW3CRangeSupport) { const b = document.getSelection(); b.rangeCount > 0 && b.removeAllRanges(), b.addRange(a); } else a.select(); return this; }, this.scrollIntoView = function (a) { const b = $(a).height(); return a.scrollTop + b < this.sc.offsetTop && (a.scrollTop += Math.abs(a.scrollTop + b - this.sc.offsetTop)), this; }, this.normalize = function () { const a = function (a, b) { if (dom.isVisiblePoint(a) && !dom.isEdgePoint(a) || dom.isVisiblePoint(a) && dom.isRightEdgePoint(a) && !b || dom.isVisiblePoint(a) && dom.isLeftEdgePoint(a) && b || dom.isVisiblePoint(a) && dom.isBlock(a.node) && dom.isEmpty(a.node)) return a; const c = dom.ancestor(a.node, dom.isBlock); if ((dom.isLeftEdgePointOf(a, c) || dom.isVoid(dom.prevPoint(a).node)) && !b || (dom.isRightEdgePointOf(a, c) || dom.isVoid(dom.nextPoint(a).node)) && b) { if (dom.isVisiblePoint(a)) return a; b = !b; } const d = b ? dom.nextPointUntil(dom.nextPoint(a), dom.isVisiblePoint) : dom.prevPointUntil(dom.prevPoint(a), dom.isVisiblePoint); return d || a; }; const b = a(this.getEndPoint(), !1); const d = this.isCollapsed() ? b : a(this.getStartPoint(), !0); return new c(d.node, d.offset, b.node, b.offset); }, this.nodes = function (a, b) { a = a || func.ok; const c = b && b.includeAncestor; const d = b && b.fullyContains; const e = this.getStartPoint(); const f = this.getEndPoint(); const g = []; const h = []; return dom.walkPoint(e, f, (b) => { if (!dom.isEditable(b.node)) { let e; d ? (dom.isLeftEdgePoint(b) && h.push(b.node), dom.isRightEdgePoint(b) && list.contains(h, b.node) && (e = b.node)) : e = c ? dom.ancestor(b.node, a) : b.node, e && a(e) && g.push(e); } }, !0), list.unique(g); }, this.commonAncestor = function () { return dom.commonAncestor(a, e); }, this.expand = function (b) { const g = dom.ancestor(a, b); const h = dom.ancestor(e, b); if (!g && !h) return new c(a, d, e, f); const i = this.getPoints(); return g && (i.sc = g, i.so = 0), h && (i.ec = h, i.eo = dom.nodeLength(h)), new c(i.sc, i.so, i.ec, i.eo); }, this.collapse = function (b) { return b ? new c(a, d, a, d) : new c(e, f, e, f); }, this.splitText = function () { const b = a === e; const g = this.getPoints(); return dom.isText(e) && !dom.isEdgePoint(this.getEndPoint()) && e.splitText(f), dom.isText(a) && !dom.isEdgePoint(this.getStartPoint()) && (g.sc = a.splitText(d), g.so = 0, b && (g.ec = g.sc, g.eo = f - d)), new c(g.sc, g.so, g.ec, g.eo); }, this.deleteContents = function () { if (this.isCollapsed()) return this; const a = this.splitText(); const b = a.nodes(null, { fullyContains: !0 }); const d = dom.prevPointUntil(a.getStartPoint(), (a) => !list.contains(b, a.node)); const e = []; return $.each(b, (a, b) => { const c = b.parentNode; d.node !== c && dom.nodeLength(c) === 1 && e.push(c), dom.remove(b, !1); }), $.each(e, (a, b) => { dom.remove(b, !1); }), new c(d.node, d.offset, d.node, d.offset).normalize(); }; const h = function (b) { return function () { const c = dom.ancestor(a, b); return !!c && c === dom.ancestor(e, b); }; }; this.isOnEditable = h(dom.isEditable), this.isOnList = h(dom.isList), this.isOnAnchor = h(dom.isAnchor), this.isOnCell = h(dom.isCell), this.isOnData = h(dom.isData), this.isLeftEdgeOf = function (a) { if (!dom.isLeftEdgePoint(this.getStartPoint())) return !1; const b = dom.ancestor(this.sc, a); return b && dom.isLeftEdgeOf(this.sc, b); }, this.isCollapsed = function () { return a === e && d === f; }, this.wrapBodyInlineWithPara = function () { if (dom.isBodyContainer(a) && dom.isEmpty(a)) return a.innerHTML = dom.emptyPara, new c(a.firstChild, 0, a.firstChild, 0); const b = this.normalize(); if (dom.isParaInline(a) || dom.isPara(a)) return b; let d; if (dom.isInline(b.sc)) { const e = dom.listAncestor(b.sc, func.not(dom.isInline)); d = list.last(e), dom.isInline(d) || (d = e[e.length - 2] || b.sc.childNodes[b.so]); } else d = b.sc.childNodes[b.so > 0 ? b.so - 1 : 0]; let f = dom.listPrev(d, dom.isParaInline).reverse(); if (f = f.concat(dom.listNext(d.nextSibling, dom.isParaInline)), f.length) { const g = dom.wrap(list.head(f), 'p'); dom.appendChildNodes(g, list.tail(f)); } return this.normalize(); }, this.insertNode = function (a) { const b = this.wrapBodyInlineWithPara().deleteContents(); const c = dom.splitPoint(b.getStartPoint(), dom.isInline(a)); return c.rightNode ? c.rightNode.parentNode.insertBefore(a, c.rightNode) : c.container.appendChild(a), a; }, this.pasteHTML = function (a) { const b = $('<div></div>').html(a)[0]; const c = list.from(b.childNodes); const d = this.wrapBodyInlineWithPara().deleteContents(); return c.reverse().map((a) => d.insertNode(a)).reverse(); }, this.toString = function () { const a = g(); return agent.isW3CRangeSupport ? a.toString() : a.text; }, this.getWordRange = function (a) { let b = this.getEndPoint(); if (!dom.isCharPoint(b)) return this; const d = dom.prevPointUntil(b, (a) => !dom.isCharPoint(a)); return a && (b = dom.nextPointUntil(b, (a) => !dom.isCharPoint(a))), new c(d.node, d.offset, b.node, b.offset); }, this.bookmark = function (b) { return { s: { path: dom.makeOffsetPath(b, a), offset: d }, e: { path: dom.makeOffsetPath(b, e), offset: f } }; }, this.paraBookmark = function (b) { return { s: { path: list.tail(dom.makeOffsetPath(list.head(b), a)), offset: d }, e: { path: list.tail(dom.makeOffsetPath(list.last(b), e)), offset: f } }; }, this.getClientRects = function () { const a = g(); return a.getClientRects(); };
    }; return {
      create(a, b, d, e) { if (arguments.length === 4) return new c(a, b, d, e); if (arguments.length === 2) return d = a, e = b, new c(a, b, d, e); let f = this.createFromSelection(); return f || arguments.length !== 1 ? f : (f = this.createFromNode(arguments[0]), f.collapse(dom.emptyPara === arguments[0].innerHTML)); }, createFromSelection() { let b; let d; let e; let f; if (agent.isW3CRangeSupport) { const g = document.getSelection(); if (!g || g.rangeCount === 0) return null; if (dom.isBody(g.anchorNode)) return null; const h = g.getRangeAt(0); b = h.startContainer, d = h.startOffset, e = h.endContainer, f = h.endOffset; } else { const i = document.selection.createRange(); const j = i.duplicate(); j.collapse(!1); const k = i; k.collapse(!0); let l = a(k, !0); const m = a(j, !1); dom.isText(l.node) && dom.isLeftEdgePoint(l) && dom.isTextNode(m.node) && dom.isRightEdgePoint(m) && m.node.nextSibling === l.node && (l = m), b = l.cont, d = l.offset, e = m.cont, f = m.offset; } return new c(b, d, e, f); }, createFromNode(a) { let b = a; let c = 0; let d = a; let e = dom.nodeLength(d); return dom.isVoid(b) && (c = dom.listPrev(b).length - 1, b = b.parentNode), dom.isBR(d) ? (e = dom.listPrev(d).length - 1, d = d.parentNode) : dom.isVoid(d) && (e = dom.listPrev(d).length, d = d.parentNode), this.create(b, c, d, e); }, createFromNodeBefore(a) { return this.createFromNode(a).collapse(!0); }, createFromNodeAfter(a) { return this.createFromNode(a).collapse(); }, createFromBookmark(a, b) { const d = dom.fromOffsetPath(a, b.s.path); const e = b.s.offset; const f = dom.fromOffsetPath(a, b.e.path); const g = b.e.offset; return new c(d, e, f, g); }, createFromParaBookmark(a, b) { const d = a.s.offset; const e = a.e.offset; const f = dom.fromOffsetPath(list.head(b), a.s.path); const g = dom.fromOffsetPath(list.last(b), a.e.path); return new c(f, d, g, e); },
    };
  }()); const async = (function () {
    const a = function (a) { return $.Deferred((b) => { $.extend(new FileReader(), { onload(a) { const c = a.target.result; b.resolve(c); }, onerror() { b.reject(this); } }).readAsDataURL(a); }).promise(); }; const b = function (a) {
      return $.Deferred((b) => {
        const c = $('<img>'); c.one('load', () => { c.off('error abort'), b.resolve(c); }).one('error abort', () => { c.off('load').detach(), b.reject(c); }).css({ display: 'none' }).appendTo(document.body)
          .attr('src', a);
      }).promise();
    }; return { readFileAsDataURL: a, createImage: b };
  }()); const History = function (a) {
    let b = []; let c = -1; const d = a[0]; const e = function () {
      const b = range.create(d); const c = { s: { path: [], offset: 0 }, e: { path: [], offset: 0 } }; return { contents: a.html(), bookmark: b ? b.bookmark(d) : c };
    }; const f = function (b) { b.contents !== null && a.html(b.contents), b.bookmark !== null && range.createFromBookmark(d, b.bookmark).select(); }; this.rewind = function () { a.html() !== b[c].contents && this.recordUndo(), c = 0, f(b[c]); }, this.reset = function () { b = [], c = -1, a.html(''), this.recordUndo(); }, this.undo = function () { a.html() !== b[c].contents && this.recordUndo(), c > 0 && (c--, f(b[c])); }, this.redo = function () { b.length - 1 > c && (c++, f(b[c])); }, this.recordUndo = function () { c++, b.length > c && (b = b.slice(0, c)), b.push(e()); };
  }; const Style = function () {
    const a = function (a, b) { if (agent.jqueryVersion < 1.9) { const c = {}; return $.each(b, (b, d) => { c[d] = a.css(d); }), c; } return a.css.call(a, b); }; this.fromNode = function (b) { const c = ['font-family', 'font-size', 'text-align', 'list-style-type', 'line-height']; const d = a(b, c) || {}; return d['font-size'] = parseInt(d['font-size'], 10), d; }, this.stylePara = function (a, b) { $.each(a.nodes(dom.isPara, { includeAncestor: !0 }), (a, c) => { $(c).css(b); }); }, this.styleNodes = function (a, b) { a = a.splitText(); const c = b && b.nodeName || 'SPAN'; const d = !(!b || !b.expandClosestSibling); const e = !(!b || !b.onlyPartialContains); if (a.isCollapsed()) return [a.insertNode(dom.create(c))]; let f = dom.makePredByNodeName(c); const g = a.nodes(dom.isText, { fullyContains: !0 }).map((a) => dom.singleChildAncestor(a, f) || dom.wrap(a, c)); if (d) { if (e) { const h = a.nodes(); f = func.and(f, (a) => list.contains(h, a)); } return g.map((a) => { const b = dom.withClosestSiblings(a, f); const c = list.head(b); const d = list.tail(b); return $.each(d, (a, b) => { dom.appendChildNodes(c, b.childNodes), dom.remove(b); }), list.head(b); }); } return g; }, this.current = function (a) {
      const b = $(dom.isElement(a.sc) ? a.sc : a.sc.parentNode); let c = this.fromNode(b); try {
        c = $.extend(c, {
          'font-bold': document.queryCommandState('bold') ? 'bold' : 'normal', 'font-italic': document.queryCommandState('italic') ? 'italic' : 'normal', 'font-underline': document.queryCommandState('underline') ? 'underline' : 'normal', 'font-subscript': document.queryCommandState('subscript') ? 'subscript' : 'normal', 'font-superscript': document.queryCommandState('superscript') ? 'superscript' : 'normal', 'font-strikethrough': document.queryCommandState('strikethrough') ? 'strikethrough' : 'normal',
        });
      } catch (d) {} if (a.isOnList()) { const e = ['circle', 'disc', 'disc-leading-zero', 'square']; const f = $.inArray(c['list-style-type'], e) > -1; c['list-style'] = f ? 'unordered' : 'ordered'; } else c['list-style'] = 'none'; const g = dom.ancestor(a.sc, dom.isPara); if (g && g.style['line-height'])c['line-height'] = g.style.lineHeight; else { const h = parseInt(c['line-height'], 10) / parseInt(c['font-size'], 10); c['line-height'] = h.toFixed(1); } return c.anchor = a.isOnAnchor() && dom.ancestor(a.sc, dom.isAnchor), c.ancestors = dom.listAncestor(a.sc, dom.isEditable), c.range = a, c;
    };
  }; const Bullet = function () { const a = this; this.insertOrderedList = function (a) { this.toggleList('OL', a); }, this.insertUnorderedList = function (a) { this.toggleList('UL', a); }, this.indent = function (a) { const b = this; const c = range.create(a).wrapBodyInlineWithPara(); const d = c.nodes(dom.isPara, { includeAncestor: !0 }); const e = list.clusterBy(d, func.peq2('parentNode')); $.each(e, (a, c) => { const d = list.head(c); dom.isLi(d) ? b.wrapList(c, d.parentNode.nodeName) : $.each(c, (a, b) => { $(b).css('marginLeft', (a, b) => (parseInt(b, 10) || 0) + 25); }); }), c.select(); }, this.outdent = function (a) { const b = this; const c = range.create(a).wrapBodyInlineWithPara(); const d = c.nodes(dom.isPara, { includeAncestor: !0 }); const e = list.clusterBy(d, func.peq2('parentNode')); $.each(e, (a, c) => { const d = list.head(c); dom.isLi(d) ? b.releaseList([c]) : $.each(c, (a, b) => { $(b).css('marginLeft', (a, b) => (b = parseInt(b, 10) || 0, b > 25 ? b - 25 : '')); }); }), c.select(); }, this.toggleList = function (b, c) { const d = range.create(c).wrapBodyInlineWithPara(); let e = d.nodes(dom.isPara, { includeAncestor: !0 }); const f = d.paraBookmark(e); const g = list.clusterBy(e, func.peq2('parentNode')); if (list.find(e, dom.isPurePara)) { let h = []; $.each(g, (c, d) => { h = h.concat(a.wrapList(d, b)); }), e = h; } else { const i = d.nodes(dom.isList, { includeAncestor: !0 }).filter((a) => !$.nodeName(a, b)); i.length ? $.each(i, (a, c) => { dom.replace(c, b); }) : e = this.releaseList(g, !0); }range.createFromParaBookmark(f, e).select(); }, this.wrapList = function (a, b) { const c = list.head(a); const d = list.last(a); const e = dom.isList(c.previousSibling) && c.previousSibling; const f = dom.isList(d.nextSibling) && d.nextSibling; const g = e || dom.insertAfter(dom.create(b || 'UL'), d); return a = a.map((a) => (dom.isPurePara(a) ? dom.replace(a, 'LI') : a)), dom.appendChildNodes(g, a), f && (dom.appendChildNodes(g, list.from(f.childNodes)), dom.remove(f)), a; }, this.releaseList = function (a, b) { let c = []; return $.each(a, (a, d) => { const e = list.head(d); const f = list.last(d); const g = b ? dom.lastAncestor(e, dom.isList) : e.parentNode; const h = g.childNodes.length > 1 ? dom.splitTree(g, { node: f.parentNode, offset: dom.position(f) + 1 }, { isSkipPaddingBlankHTML: !0 }) : null; const i = dom.splitTree(g, { node: e.parentNode, offset: dom.position(e) }, { isSkipPaddingBlankHTML: !0 }); d = b ? dom.listDescendant(i, dom.isLi) : list.from(i.childNodes).filter(dom.isLi), (b || !dom.isList(g.parentNode)) && (d = d.map((a) => dom.replace(a, 'P'))), $.each(list.from(d).reverse(), (a, b) => { dom.insertAfter(b, g); }); const j = list.compact([g, i, h]); $.each(j, (a, b) => { const c = [b].concat(dom.listDescendant(b, dom.isList)); $.each(c.reverse(), (a, b) => { dom.nodeLength(b) || dom.remove(b, !0); }); }), c = c.concat(d); }), c; }; }; const Typing = function () { const a = new Bullet(); this.insertTab = function (a, b) { const c = dom.createText(new Array(b + 1).join(dom.NBSP_CHAR)); a = a.deleteContents(), a.insertNode(c, !0), a = range.create(c, b), a.select(); }, this.insertParagraph = function (b) { let c = range.create(b); c = c.deleteContents(), c = c.wrapBodyInlineWithPara(); let d; const e = dom.ancestor(c.sc, dom.isPara); if (e) { if (dom.isEmpty(e) && dom.isLi(e)) return void a.toggleList(e.parentNode.nodeName); if (dom.isEmpty(e) && dom.isPara(e) && dom.isBlockquote(e.parentNode))dom.insertAfter(e, e.parentNode), d = e; else { d = dom.splitTree(e, c.getStartPoint()); let f = dom.listDescendant(e, dom.isEmptyAnchor); f = f.concat(dom.listDescendant(d, dom.isEmptyAnchor)), $.each(f, (a, b) => { dom.remove(b); }), (dom.isHeading(d) || dom.isPre(d)) && dom.isEmpty(d) && (d = dom.replace(d, 'p')); } } else { const g = c.sc.childNodes[c.so]; d = $(dom.emptyPara)[0], g ? c.sc.insertBefore(d, g) : c.sc.appendChild(d); }range.create(d, 0).normalize().select().scrollIntoView(b); }; }; const Table = function () { this.tab = function (a, b) { const c = dom.ancestor(a.commonAncestor(), dom.isCell); const d = dom.ancestor(c, dom.isTable); const e = dom.listDescendant(d, dom.isCell); const f = list[b ? 'prev' : 'next'](e, c); f && range.create(f, 0).select(); }, this.createTable = function (a, b, c) { for (var d, e = [], f = 0; a > f; f++)e.push(`<td>${dom.blank}</td>`); d = e.join(''); for (var g, h = [], i = 0; b > i; i++)h.push(`<tr>${d}</tr>`); g = h.join(''); const j = $(`<table>${g}</table>`); return c && c.tableClassName && j.addClass(c.tableClassName), j[0]; }; }; const KEY_BOGUS = 'bogus'; const Editor = function (a) {
    const b = this; const c = a.layoutInfo.note; const d = a.layoutInfo.editor; const e = a.layoutInfo.editable; const f = a.options; const g = f.langInfo; const h = e[0]; let i = null; const j = new Style(); const k = new Table(); const l = new Typing(); const m = new Bullet(); const n = new History(e); this.initialize = function () {
      e.on('keydown', (c) => { c.keyCode === key.code.ENTER && a.triggerEvent('enter', c), a.triggerEvent('keydown', c), c.isDefaultPrevented() || (f.shortcuts ? b.handleKeyMap(c) : b.preventDefaultEditableShortCuts(c)); }).on('keyup', (b) => { a.triggerEvent('keyup', b); }).on('focus', (b) => { a.triggerEvent('focus', b); }).on('blur', (b) => { a.triggerEvent('blur', b); })
        .on('mousedown', (b) => { a.triggerEvent('mousedown', b); })
        .on('mouseup', (b) => { a.triggerEvent('mouseup', b); })
        .on('scroll', (b) => { a.triggerEvent('scroll', b); })
        .on('paste', (b) => { a.triggerEvent('paste', b); }), e.html(dom.html(c) || dom.emptyPara); const g = agent.isMSIE ? 'DOMCharacterDataModified DOMSubtreeModified DOMNodeInserted' : 'input'; e.on(g, () => { a.triggerEvent('change', e.html()); }), d.on('focusin', (b) => { a.triggerEvent('focusin', b); }).on('focusout', (b) => { a.triggerEvent('focusout', b); }), f.airMode || (f.width && d.outerWidth(f.width), f.height && e.outerHeight(f.height), f.maxHeight && e.css('max-height', f.maxHeight), f.minHeight && e.css('min-height', f.minHeight)), n.recordUndo();
    }, this.destroy = function () { e.off(); }, this.handleKeyMap = function (b) { const c = f.keyMap[agent.isMac ? 'mac' : 'pc']; const d = []; b.metaKey && d.push('CMD'), b.ctrlKey && !b.altKey && d.push('CTRL'), b.shiftKey && d.push('SHIFT'); const e = key.nameFromCode[b.keyCode]; e && d.push(e); const g = c[d.join('+')]; g ? (b.preventDefault(), a.invoke(g)) : key.isEdit(b.keyCode) && this.afterCommand(); }, this.preventDefaultEditableShortCuts = function (a) { (a.ctrlKey || a.metaKey) && list.contains([66, 73, 85], a.keyCode) && a.preventDefault(); }, this.createRange = function () { return this.focus(), range.create(h); }, this.saveRange = function (a) { i = this.createRange(), a && i.collapse().select(); }, this.restoreRange = function () { i && (i.select(), this.focus()); }, this.saveTarget = function (a) { e.data('target', a); }, this.clearTarget = function () { e.removeData('target'); }, this.restoreTarget = function () { return e.data('target'); }, this.currentStyle = function () { let a = range.create(); return a && (a = a.normalize()), a ? j.current(a) : j.fromNode(e); }, this.styleFromNode = function (a) { return j.fromNode(a); }, this.undo = function () { a.triggerEvent('before.command', e.html()), n.undo(), a.triggerEvent('change', e.html()); }, a.memo('help.undo', g.help.undo), this.redo = function () { a.triggerEvent('before.command', e.html()), n.redo(), a.triggerEvent('change', e.html()); }, a.memo('help.redo', g.help.redo); for (var o = this.beforeCommand = function () { a.triggerEvent('before.command', e.html()), b.focus(); }, p = this.afterCommand = function (b) { n.recordUndo(), b || a.triggerEvent('change', e.html()); }, q = ['bold', 'italic', 'underline', 'strikethrough', 'superscript', 'subscript', 'justifyLeft', 'justifyCenter', 'justifyRight', 'justifyFull', 'formatBlock', 'removeFormat', 'backColor', 'foreColor', 'fontName'], r = 0, s = q.length; s > r; r++) this[q[r]] = (function (a) { return function (b) { o(), document.execCommand(a, !1, b), p(!0); }; }(q[r])), a.memo(`help.${q[r]}`, g.help[q[r]]); this.tab = function () { const a = this.createRange(); a.isCollapsed() && a.isOnCell() ? k.tab(a) : (o(), l.insertTab(a, f.tabSize), p()); }, a.memo('help.tab', g.help.tab), this.untab = function () { const a = this.createRange(); a.isCollapsed() && a.isOnCell() && k.tab(a, !0); }, a.memo('help.untab', g.help.untab), this.wrapCommand = function (a) { return function () { o(), a.apply(b, arguments), p(); }; }, this.insertParagraph = this.wrapCommand(() => { l.insertParagraph(h); }), a.memo('help.insertParagraph', g.help.insertParagraph), this.insertOrderedList = this.wrapCommand(() => { m.insertOrderedList(h); }), a.memo('help.insertOrderedList', g.help.insertOrderedList), this.insertUnorderedList = this.wrapCommand(() => { m.insertUnorderedList(h); }), a.memo('help.insertUnorderedList', g.help.insertUnorderedList), this.indent = this.wrapCommand(() => { m.indent(h); }), a.memo('help.indent', g.help.indent), this.outdent = this.wrapCommand(() => { m.outdent(h); }), a.memo('help.outdent', g.help.outdent), this.insertImage = function (b, c) { return async.createImage(b, c).then((a) => { o(), typeof c === 'function' ? c(a) : (typeof c === 'string' && a.attr('data-filename', c), a.css('width', Math.min(e.width(), a.width()))), a.show(), range.create(h).insertNode(a[0]), range.createFromNodeAfter(a[0]).select(), p(); }).fail((b) => { a.triggerEvent('image.upload.error', b); }); }, this.insertImages = function (c) { $.each(c, (c, d) => { const e = d.name; f.maximumImageFileSize && f.maximumImageFileSize < d.size ? a.triggerEvent('image.upload.error', g.image.maximumFileSizeError) : async.readFileAsDataURL(d).then((a) => b.insertImage(a, e)).fail(() => { a.triggerEvent('image.upload.error'); }); }); }, this.insertImagesOrCallback = function (b) { const c = f.callbacks; c.onImageUpload ? a.triggerEvent('image.upload', b) : this.insertImages(b); }, this.insertNode = this.wrapCommand(function (a) { const b = this.createRange(); b.insertNode(a), range.createFromNodeAfter(a).select(); }), this.insertText = this.wrapCommand(function (a) { const b = this.createRange(); const c = b.insertNode(dom.createText(a)); range.create(c, dom.nodeLength(c)).select(); }), this.getSelectedText = function () { let a = this.createRange(); return a.isOnAnchor() && (a = range.createFromNode(dom.ancestor(a.sc, dom.isAnchor))), a.toString(); }, this.pasteHTML = this.wrapCommand(function (a) { const b = this.createRange().pasteHTML(a); range.createFromNodeAfter(list.last(b)).select(); }), this.formatBlock = this.wrapCommand((a) => { a = agent.isMSIE ? `<${a}>` : a, document.execCommand('FormatBlock', !1, a); }), this.formatPara = function () { this.formatBlock('P'); }, a.memo('help.formatPara', g.help.formatPara); for (var r = 1; r <= 6; r++) this[`formatH${r}`] = (function (a) { return function () { this.formatBlock(`H${a}`); }; }(r)), a.memo(`help.formatH${r}`, g.help[`formatH${r}`]); this.fontSize = function (a) { const b = this.createRange(); if (b && b.isCollapsed()) { const c = j.styleNodes(b); const d = list.head(c); $(c).css({ 'font-size': `${a}px` }), d && !dom.nodeLength(d) && (d.innerHTML = dom.ZERO_WIDTH_NBSP_CHAR, range.createFromNodeAfter(d.firstChild).select(), e.data(KEY_BOGUS, d)); } else o(), $(j.styleNodes(b)).css({ 'font-size': `${a}px` }), p(); }, this.insertHorizontalRule = this.wrapCommand(function () { const a = this.createRange().insertNode(dom.create('HR')); a.nextSibling && range.create(a.nextSibling, 0).normalize().select(); }), a.memo('help.insertHorizontalRule', g.help.insertHorizontalRule), this.removeBogus = function () { const a = e.data(KEY_BOGUS); if (a) { const b = list.find(list.from(a.childNodes), dom.isText); const c = b.nodeValue.indexOf(dom.ZERO_WIDTH_NBSP_CHAR); c !== -1 && b.deleteData(c, 1), dom.isEmpty(a) && dom.remove(a), e.removeData(KEY_BOGUS); } }, this.lineHeight = this.wrapCommand(function (a) { j.stylePara(this.createRange(), { lineHeight: a }); }), this.unlink = function () { let a = this.createRange(); if (a.isOnAnchor()) { const b = dom.ancestor(a.sc, dom.isAnchor); a = range.createFromNode(b), a.select(), o(), document.execCommand('unlink'), p(); } }, this.createLink = this.wrapCommand(function (a) { let b = a.url; const c = a.text; const d = a.isNewWindow; let e = a.range || this.createRange(); const g = e.toString() !== c; typeof b === 'string' && (b = b.trim()), f.onCreateLink && (b = f.onCreateLink(b)); let h = []; if (g) { e = e.deleteContents(); const i = e.insertNode($(`<A>${c}</A>`)[0]); h.push(i); } else h = j.styleNodes(e, { nodeName: 'A', expandClosestSibling: !0, onlyPartialContains: !0 }); $.each(h, (a, c) => { b = /^[A-Za-z][A-Za-z0-9+-.]*\:[\/\/]?/.test(b) ? b : `http://${b}`, $(c).attr('href', b), d ? $(c).attr('target', '_blank') : $(c).removeAttr('target'); }); const k = range.createFromNodeBefore(list.head(h)); const l = k.getStartPoint(); const m = range.createFromNodeAfter(list.last(h)); const n = m.getEndPoint(); range.create(l.node, l.offset, n.node, n.offset).select(); }), this.getLinkInfo = function () {
      const a = this.createRange().expand(dom.isAnchor); const b = $(list.head(a.nodes(dom.isAnchor))); return {
        range: a, text: a.toString(), isNewWindow: b.length ? b.attr('target') === '_blank' : !1, url: b.length ? b.attr('href') : '',
      };
    }, this.color = this.wrapCommand((a) => { const b = a.foreColor; const c = a.backColor; b && document.execCommand('foreColor', !1, b), c && document.execCommand('backColor', !1, c); }), this.insertTable = this.wrapCommand(function (a) { const b = a.split('x'); const c = this.createRange().deleteContents(); c.insertNode(k.createTable(b[0], b[1], f)); }), this.floatMe = this.wrapCommand(function (a) { const b = $(this.restoreTarget()); b.css('float', a); }), this.resize = this.wrapCommand(function (a) { const b = $(this.restoreTarget()); b.css({ width: `${100 * a}%`, height: '' }); }), this.resizeTo = function (a, b, c) { let d; if (c) { const e = a.y / a.x; const f = b.data('ratio'); d = { width: f > e ? a.x : a.y / f, height: f > e ? a.x * f : a.y }; } else d = { width: a.x, height: a.y }; b.css(d); }, this.removeMedia = this.wrapCommand(function () { const b = $(this.restoreTarget()).detach(); a.triggerEvent('media.delete', b, e); }), this.hasFocus = function () { return e.is(':focus'); }, this.focus = function () { this.hasFocus() || e.focus(); }, this.isEmpty = function () { return dom.isEmpty(e[0]) || dom.emptyPara === e.html(); }, this.empty = function () { a.invoke('code', dom.emptyPara); };
  }; const Clipboard = function (a) { const b = this; const c = a.layoutInfo.editable; this.events = { 'summernote.keydown': function (c, d) { b.needKeydownHook() && (d.ctrlKey || d.metaKey) && d.keyCode === key.code.V && (a.invoke('editor.saveRange'), b.$paste.focus(), setTimeout(() => { b.pasteByHook(); }, 0)); } }, this.needKeydownHook = function () { return agent.isMSIE && agent.browserVersion > 10 || agent.isFF; }, this.initialize = function () { this.needKeydownHook() ? (this.$paste = $('<div tabindex="-1" />').attr('contenteditable', !0).css({ position: 'absolute', left: -1e5, opacity: 0 }), c.before(this.$paste), this.$paste.on('paste', (b) => { a.triggerEvent('paste', b); })) : c.on('paste', this.pasteByEvent); }, this.destroy = function () { this.needKeydownHook() && (this.$paste.remove(), this.$paste = null); }, this.pasteByHook = function () { const b = this.$paste[0].firstChild; if (dom.isImg(b)) { for (var c = b.src, d = atob(c.split(',')[1]), e = new Uint8Array(d.length), f = 0; f < d.length; f++)e[f] = d.charCodeAt(f); const g = new Blob([e], { type: 'image/png' }); g.name = 'clipboard.png', a.invoke('editor.restoreRange'), a.invoke('editor.focus'), a.invoke('editor.insertImagesOrCallback', [g]); } else { const h = $('<div />').html(this.$paste.html()).html(); a.invoke('editor.restoreRange'), a.invoke('editor.focus'), h && a.invoke('editor.pasteHTML', h); } this.$paste.empty(); }, this.pasteByEvent = function (b) { const c = b.originalEvent.clipboardData; if (c && c.items && c.items.length) { const d = list.head(c.items); d.kind === 'file' && d.type.indexOf('image/') !== -1 && a.invoke('editor.insertImagesOrCallback', [d.getAsFile()]), a.invoke('editor.afterCommand'); } }; }; const Dropzone = function (a) { const b = $(document); const c = a.layoutInfo.editor; const d = a.layoutInfo.editable; const e = a.options; const f = e.langInfo; let g = {}; const h = $(['<div class="note-dropzone">', '  <div class="note-dropzone-message"/>', '</div>'].join('')).prependTo(c); const i = function () { Object.keys(g).forEach((a) => { b.off(a.substr(2).toLowerCase(), g[a]); }), g = {}; }; this.initialize = function () { e.disableDragAndDrop ? (g.onDrop = function (a) { a.preventDefault(); }, b.on('drop', g.onDrop)) : this.attachDragAndDropEvent(); }, this.attachDragAndDropEvent = function () { let e = $(); const i = h.find('.note-dropzone-message'); g.onDragenter = function (b) { const d = a.invoke('codeview.isActivated'); const g = c.width() > 0 && c.height() > 0; d || e.length || !g || (c.addClass('dragover'), h.width(c.width()), h.height(c.height()), i.text(f.image.dragImageHere)), e = e.add(b.target); }, g.onDragleave = function (a) { e = e.not(a.target), e.length || c.removeClass('dragover'); }, g.onDrop = function () { e = $(), c.removeClass('dragover'); }, b.on('dragenter', g.onDragenter).on('dragleave', g.onDragleave).on('drop', g.onDrop), h.on('dragenter', () => { h.addClass('hover'), i.text(f.image.dropImage); }).on('dragleave', () => { h.removeClass('hover'), i.text(f.image.dragImageHere); }), h.on('drop', (b) => { const c = b.originalEvent.dataTransfer; c && c.files && c.files.length ? (b.preventDefault(), d.focus(), a.invoke('editor.insertImagesOrCallback', c.files)) : $.each(c.types, (b, d) => { const e = c.getData(d); d.toLowerCase().indexOf('text') > -1 ? a.invoke('editor.pasteHTML', e) : $(e).each(function () { a.invoke('editor.insertNode', this); }); }); }).on('dragover', !1); }, this.destroy = function () { i(); }; }; let CodeMirror; agent.hasCodeMirror && (agent.isSupportAmd ? require(['codemirror'], (a) => { CodeMirror = a; }) : CodeMirror = window.CodeMirror); const Codeview = function (a) { const b = a.layoutInfo.editor; const c = a.layoutInfo.editable; const d = a.layoutInfo.codable; const e = a.options; this.sync = function () { const a = this.isActivated(); a && agent.hasCodeMirror && d.data('cmEditor').save(); }, this.isActivated = function () { return b.hasClass('codeview'); }, this.toggle = function () { this.isActivated() ? this.deactivate() : this.activate(), a.triggerEvent('codeview.toggled'); }, this.activate = function () { if (d.val(dom.html(c, e.prettifyHtml)), d.height(c.height()), a.invoke('toolbar.updateCodeview', !0), b.addClass('codeview'), d.focus(), agent.hasCodeMirror) { const f = CodeMirror.fromTextArea(d[0], e.codemirror); if (e.codemirror.tern) { const g = new CodeMirror.TernServer(e.codemirror.tern); f.ternServer = g, f.on('cursorActivity', (a) => { g.updateArgHints(a); }); }f.setSize(null, c.outerHeight()), d.data('cmEditor', f); } }, this.deactivate = function () { if (agent.hasCodeMirror) { const f = d.data('cmEditor'); d.val(f.getValue()), f.toTextArea(); } const g = dom.value(d, e.prettifyHtml) || dom.emptyPara; const h = c.html() !== g; c.html(g), c.height(e.height ? d.height() : 'auto'), b.removeClass('codeview'), h && a.triggerEvent('change', c.html(), c), c.focus(), a.invoke('toolbar.updateCodeview', !1); }, this.destroy = function () { this.isActivated() && this.deactivate(); }; }; const EDITABLE_PADDING = 24; const Statusbar = function (a) { const b = $(document); const c = a.layoutInfo.statusbar; const d = a.layoutInfo.editable; const e = a.options; this.initialize = function () { e.airMode || e.disableResizeEditor || c.on('mousedown', (a) => { a.preventDefault(), a.stopPropagation(); const c = d.offset().top - b.scrollTop(); b.on('mousemove', (a) => { let b = a.clientY - (c + EDITABLE_PADDING); b = e.minheight > 0 ? Math.max(b, e.minheight) : b, b = e.maxHeight > 0 ? Math.min(b, e.maxHeight) : b, d.height(b); }).one('mouseup', () => { b.off('mousemove'); }); }); }, this.destroy = function () { c.off(), c.remove(); }; }; const Fullscreen = function (a) { const b = a.layoutInfo.editor; const c = a.layoutInfo.toolbar; const d = a.layoutInfo.editable; const e = a.layoutInfo.codable; const f = $(window); const g = $('html, body'); this.toggle = function () { const h = function (a) { d.css('height', a.h), e.css('height', a.h), e.data('cmeditor') && e.data('cmeditor').setsize(null, a.h); }; b.toggleClass('fullscreen'), this.isFullscreen() ? (d.data('orgHeight', d.css('height')), f.on('resize', () => { h({ h: f.height() - c.outerHeight() }); }).trigger('resize'), g.css('overflow', 'hidden')) : (f.off('resize'), h({ h: d.data('orgHeight') }), g.css('overflow', 'visible')), a.invoke('toolbar.updateFullscreen', this.isFullscreen()); }, this.isFullscreen = function () { return b.hasClass('fullscreen'); }; }; const Handle = function (a) {
    const b = this; const c = $(document); const d = a.layoutInfo.editingArea; const e = a.options; this.events = { 'summernote.mousedown': function (a, c) { b.update(c.target) && c.preventDefault(); }, 'summernote.keyup summernote.scroll summernote.change summernote.dialog.shown': function () { b.update(); } }, this.initialize = function () { this.$handle = $(['<div class="note-handle">', '<div class="note-control-selection">', '<div class="note-control-selection-bg"></div>', '<div class="note-control-holder note-control-nw"></div>', '<div class="note-control-holder note-control-ne"></div>', '<div class="note-control-holder note-control-sw"></div>', '<div class="', e.disableResizeImage ? 'note-control-holder' : 'note-control-sizing', ' note-control-se"></div>', e.disableResizeImage ? '' : '<div class="note-control-selection-info"></div>', '</div>', '</div>'].join('')).prependTo(d), this.$handle.on('mousedown', (d) => { if (dom.isControlSizing(d.target)) { d.preventDefault(), d.stopPropagation(); const e = b.$handle.find('.note-control-selection').data('target'); const f = e.offset(); const g = c.scrollTop(); c.on('mousemove', (c) => { a.invoke('editor.resizeTo', { x: c.clientX - f.left, y: c.clientY - (f.top - g) }, e, !c.shiftKey), b.update(e[0]); }).one('mouseup', (b) => { b.preventDefault(), c.off('mousemove'), a.invoke('editor.afterCommand'); }), e.data('ratio') || e.data('ratio', e.height() / e.width()); } }); }, this.destroy = function () { this.$handle.remove(); }, this.update = function (b) {
      const c = dom.isImg(b); const d = this.$handle.find('.note-control-selection'); if (a.invoke('imagePopover.update', b), c) {
        const e = $(b); const f = e.position(); const g = { w: e.outerWidth(!0), h: e.outerHeight(!0) }; d.css({
          display: 'block', left: f.left, top: f.top, width: g.w, height: g.h,
        }).data('target', e); const h = `${g.w}x${g.h}`; d.find('.note-control-selection-info').text(h), a.invoke('editor.saveTarget', b);
      } else this.hide(); return c;
    }, this.hide = function () { a.invoke('editor.clearTarget'), this.$handle.children().hide(); };
  }; const AutoLink = function (a) { const b = this; const c = 'http://'; const d = /^([A-Za-z][A-Za-z0-9+-.]*\:[\/\/]?|mailto:[A-Z0-9._%+-]+@)?(www\.)?(.+)$/i; this.events = { 'summernote.keyup': function (a, c) { c.isDefaultPrevented() || b.handleKeyup(c); }, 'summernote.keydown': function (a, c) { b.handleKeydown(c); } }, this.initialize = function () { this.lastWordRange = null; }, this.destroy = function () { this.lastWordRange = null; }, this.replace = function () { if (this.lastWordRange) { const b = this.lastWordRange.toString(); const e = b.match(d); if (e && (e[1] || e[2])) { const f = e[1] ? b : c + b; const g = $('<a />').html(b).attr('href', f)[0]; this.lastWordRange.insertNode(g), this.lastWordRange = null, a.invoke('editor.focus'); } } }, this.handleKeydown = function (b) { if (list.contains([key.code.ENTER, key.code.SPACE], b.keyCode)) { const c = a.invoke('editor.createRange').getWordRange(); this.lastWordRange = c; } }, this.handleKeyup = function (a) { list.contains([key.code.ENTER, key.code.SPACE], a.keyCode) && this.replace(); }; }; const AutoSync = function (a) { const b = a.layoutInfo.note; this.events = { 'summernote.change': function () { b.val(a.invoke('code')); } }, this.shouldInitialize = function () { return dom.isTextarea(b[0]); }; }; const Placeholder = function (a) { const b = this; const c = a.layoutInfo.editingArea; const d = a.options; this.events = { 'summernote.init summernote.change': function () { b.update(); }, 'summernote.codeview.toggled': function () { b.update(); } }, this.shouldInitialize = function () { return !!d.placeholder; }, this.initialize = function () { this.$placeholder = $('<div class="note-placeholder">'), this.$placeholder.on('click', () => { a.invoke('focus'); }).text(d.placeholder).prependTo(c); }, this.destroy = function () { this.$placeholder.remove(); }, this.update = function () { const b = !a.invoke('codeview.isActivated') && a.invoke('editor.isEmpty'); this.$placeholder.toggle(b); }; }; const Buttons = function (a) {
    const b = this; const c = $.summernote.ui; const d = a.layoutInfo.toolbar; const e = a.options; const f = e.langInfo; const g = func.invertObject(e.keyMap[agent.isMac ? 'mac' : 'pc']); const h = this.representShortcut = function (a) { let b = g[a]; return e.shortcuts && b ? (agent.isMac && (b = b.replace('CMD', '⌘').replace('SHIFT', '⇧')), b = b.replace('BACKSLASH', '\\').replace('SLASH', '/').replace('LEFTBRACKET', '[').replace('RIGHTBRACKET', ']'), ` (${b})`) : ''; }; this.initialize = function () { this.addToolbarButtons(), this.addImagePopoverButtons(), this.addLinkPopoverButtons(), this.fontInstalledMap = {}; }, this.destroy = function () { delete this.fontInstalledMap; }, this.isFontInstalled = function (a) { return b.fontInstalledMap.hasOwnProperty(a) || (b.fontInstalledMap[a] = agent.isFontInstalled(a) || list.contains(e.fontNamesIgnoreCheck, a)), b.fontInstalledMap[a]; }, this.addToolbarButtons = function () {
      a.memo('button.style', () => c.buttonGroup([c.button({
        className: 'dropdown-toggle', contents: `${c.icon(e.icons.magic)} ${c.icon(e.icons.caret, 'span')}`, tooltip: f.style.style, data: { toggle: 'dropdown' },
      }), c.dropdown({
        className: 'dropdown-style', items: a.options.styleTags, template(a) { typeof a === 'string' && (a = { tag: a, title: f.style.hasOwnProperty(a) ? f.style[a] : a }); const b = a.tag; const c = a.title; const d = a.style ? ` style="${ a.style }" ` : ''; const e = a.className ? ` class="${a.className}"` : ''; return `<${b}${d}${e}>${c}</${b}>`; }, click: a.createInvokeHandler('editor.formatBlock'),
      })]).render()), a.memo('button.bold', () => c.button({
        className: 'note-btn-bold', contents: c.icon(e.icons.bold), tooltip: f.font.bold + h('bold'), click: a.createInvokeHandler('editor.bold'),
      }).render()), a.memo('button.italic', () => c.button({
        className: 'note-btn-italic', contents: c.icon(e.icons.italic), tooltip: f.font.italic + h('italic'), click: a.createInvokeHandler('editor.italic'),
      }).render()), a.memo('button.underline', () => c.button({
        className: 'note-btn-underline', contents: c.icon(e.icons.underline), tooltip: f.font.underline + h('underline'), click: a.createInvokeHandler('editor.underline'),
      }).render()), a.memo('button.clear', () => c.button({ contents: c.icon(e.icons.eraser), tooltip: f.font.clear + h('removeFormat'), click: a.createInvokeHandler('editor.removeFormat') }).render()), a.memo('button.strikethrough', () => c.button({
        className: 'note-btn-strikethrough', contents: c.icon(e.icons.strikethrough), tooltip: f.font.strikethrough + h('strikethrough'), click: a.createInvokeHandler('editor.strikethrough'),
      }).render()), a.memo('button.superscript', () => c.button({
        className: 'note-btn-superscript', contents: c.icon(e.icons.superscript), tooltip: f.font.superscript, click: a.createInvokeHandler('editor.superscript'),
      }).render()), a.memo('button.subscript', () => c.button({
        className: 'note-btn-subscript', contents: c.icon(e.icons.subscript), tooltip: f.font.subscript, click: a.createInvokeHandler('editor.subscript'),
      }).render()), a.memo('button.fontname', () => c.buttonGroup([c.button({
        className: 'dropdown-toggle', contents: `<span class="note-current-fontname"/> ${c.icon(e.icons.caret, 'span')}`, tooltip: f.font.name, data: { toggle: 'dropdown' },
      }), c.dropdownCheck({
        className: 'dropdown-fontname', checkClassName: e.icons.menuCheck, items: e.fontNames.filter(b.isFontInstalled), template(a) { return `<span style="font-family:${a}">${a}</span>`; }, click: a.createInvokeHandler('editor.fontName'),
      })]).render()), a.memo('button.fontsize', () => c.buttonGroup([c.button({
        className: 'dropdown-toggle', contents: `<span class="note-current-fontsize"/>${c.icon(e.icons.caret, 'span')}`, tooltip: f.font.size, data: { toggle: 'dropdown' },
      }), c.dropdownCheck({
        className: 'dropdown-fontsize', checkClassName: e.icons.menuCheck, items: e.fontSizes, click: a.createInvokeHandler('editor.fontSize'),
      })]).render()), a.memo('button.color', () => c.buttonGroup({
        className: 'note-color',
        children: [c.button({
          className: 'note-current-color-button', contents: c.icon(`${e.icons.font} note-recent-color`), tooltip: f.color.recent, click(b) { const c = $(b.currentTarget); a.invoke('editor.color', { backColor: c.attr('data-backColor'), foreColor: c.attr('data-foreColor') }); }, callback(a) { const b = a.find('.note-recent-color'); b.css('background-color', '#FFFF00'), a.attr('data-backColor', '#FFFF00'); },
        }), c.button({
          className: 'dropdown-toggle', contents: c.icon(e.icons.caret, 'span'), tooltip: f.color.more, data: { toggle: 'dropdown' },
        }), c.dropdown({ items: ['<li>', '<div class="btn-group">', `  <div class="note-palette-title">${f.color.background}</div>`, '  <div>', '    <button type="button" class="note-color-reset btn btn-default" data-event="backColor" data-value="inherit">', f.color.transparent, '    </button>', '  </div>', '  <div class="note-holder" data-event="backColor"/>', '</div>', '<div class="btn-group">', `  <div class="note-palette-title">${f.color.foreground}</div>`, '  <div>', '    <button type="button" class="note-color-reset btn btn-default" data-event="removeFormat" data-value="foreColor">', f.color.resetToDefault, '    </button>', '  </div>', '  <div class="note-holder" data-event="foreColor"/>', '</div>', '</li>'].join(''), callback(a) { a.find('.note-holder').each(function () { const a = $(this); a.append(c.palette({ colors: e.colors, eventName: a.data('event') }).render()); }); }, click(b) { const c = $(b.target); const d = c.data('event'); const e = c.data('value'); if (d && e) { const f = d === 'backColor' ? 'background-color' : 'color'; const g = c.closest('.note-color').find('.note-recent-color'); const h = c.closest('.note-color').find('.note-current-color-button'); g.css(f, e), h.attr(`data-${d}`, e), a.invoke(`editor.${d}`, e); } } })],
      }).render()), a.memo('button.ul', () => c.button({ contents: c.icon(e.icons.unorderedlist), tooltip: f.lists.unordered + h('insertUnorderedList'), click: a.createInvokeHandler('editor.insertUnorderedList') }).render()), a.memo('button.ol', () => c.button({ contents: c.icon(e.icons.orderedlist), tooltip: f.lists.ordered + h('insertOrderedList'), click: a.createInvokeHandler('editor.insertOrderedList') }).render()); const d = c.button({ contents: c.icon(e.icons.alignLeft), tooltip: f.paragraph.left + h('justifyLeft'), click: a.createInvokeHandler('editor.justifyLeft') }); const g = c.button({ contents: c.icon(e.icons.alignCenter), tooltip: f.paragraph.center + h('justifyCenter'), click: a.createInvokeHandler('editor.justifyCenter') }); const i = c.button({ contents: c.icon(e.icons.alignRight), tooltip: f.paragraph.right + h('justifyRight'), click: a.createInvokeHandler('editor.justifyRight') }); const j = c.button({ contents: c.icon(e.icons.alignJustify), tooltip: f.paragraph.justify + h('justifyFull'), click: a.createInvokeHandler('editor.justifyFull') }); const k = c.button({ contents: c.icon(e.icons.outdent), tooltip: f.paragraph.outdent + h('outdent'), click: a.createInvokeHandler('editor.outdent') }); const l = c.button({ contents: c.icon(e.icons.indent), tooltip: f.paragraph.indent + h('indent'), click: a.createInvokeHandler('editor.indent') }); a.memo('button.justifyLeft', func.invoke(d, 'render')), a.memo('button.justifyCenter', func.invoke(g, 'render')), a.memo('button.justifyRight', func.invoke(i, 'render')), a.memo('button.justifyFull', func.invoke(j, 'render')), a.memo('button.outdent', func.invoke(k, 'render')), a.memo('button.indent', func.invoke(l, 'render')), a.memo('button.paragraph', () => c.buttonGroup([c.button({
        className: 'dropdown-toggle', contents: `${c.icon(e.icons.alignLeft)} ${c.icon(e.icons.caret, 'span')}`, tooltip: f.paragraph.paragraph, data: { toggle: 'dropdown' },
      }), c.dropdown([c.buttonGroup({ className: 'note-align', children: [d, g, i, j] }), c.buttonGroup({ className: 'note-list', children: [k, l] })])]).render()), a.memo('button.height', () => c.buttonGroup([c.button({
        className: 'dropdown-toggle',
        contents: `${c.icon(e.icons.textHeight)} ${c.icon(e.icons.caret, 'span')}`,
        tooltip: f.font.height,
        data: { toggle: 'dropdown' },
      }), c.dropdownCheck({
        items: e.lineHeights, checkClassName: e.icons.menuCheck, className: 'dropdown-line-height', click: a.createInvokeHandler('editor.lineHeight'),
      })]).render()), a.memo('button.table', () => c.buttonGroup([c.button({
        className: 'dropdown-toggle', contents: `${c.icon(e.icons.table)} ${c.icon(e.icons.caret, 'span')}`, tooltip: f.table.table, data: { toggle: 'dropdown' },
      }), c.dropdown({ className: 'note-table', items: ['<div class="note-dimension-picker">', '  <div class="note-dimension-picker-mousecatcher" data-event="insertTable" data-value="1x1"/>', '  <div class="note-dimension-picker-highlighted"/>', '  <div class="note-dimension-picker-unhighlighted"/>', '</div>', '<div class="note-dimension-display">1 x 1</div>'].join('') })], { callback(c) { const d = c.find('.note-dimension-picker-mousecatcher'); d.css({ width: `${e.insertTableMaxSize.col}em`, height: `${e.insertTableMaxSize.row}em` }).mousedown(a.createInvokeHandler('editor.insertTable')).on('mousemove', b.tableMoveHandler); } }).render()), a.memo('button.link', () => c.button({ contents: c.icon(e.icons.link), tooltip: f.link.link + h('linkDialog.show'), click: a.createInvokeHandler('linkDialog.show') }).render()), a.memo('button.picture', () => c.button({ contents: c.icon(e.icons.picture), tooltip: f.image.image, click: a.createInvokeHandler('imageDialog.show') }).render()), a.memo('button.video', () => c.button({ contents: c.icon(e.icons.video), tooltip: f.video.video, click: a.createInvokeHandler('videoDialog.show') }).render()), a.memo('button.hr', () => c.button({ contents: c.icon(e.icons.minus), tooltip: f.hr.insert + h('insertHorizontalRule'), click: a.createInvokeHandler('editor.insertHorizontalRule') }).render()), a.memo('button.fullscreen', () => c.button({
        className: 'btn-fullscreen', contents: c.icon(e.icons.arrowsAlt), tooltip: f.options.fullscreen, click: a.createInvokeHandler('fullscreen.toggle'),
      }).render()), a.memo('button.codeview', () => c.button({
        className: 'btn-codeview', contents: c.icon(e.icons.code), tooltip: f.options.codeview, click: a.createInvokeHandler('codeview.toggle'),
      }).render()), a.memo('button.redo', () => c.button({ contents: c.icon(e.icons.redo), tooltip: f.history.redo + h('redo'), click: a.createInvokeHandler('editor.redo') }).render()), a.memo('button.undo', () => c.button({ contents: c.icon(e.icons.undo), tooltip: f.history.undo + h('undo'), click: a.createInvokeHandler('editor.undo') }).render()), a.memo('button.help', () => c.button({ contents: c.icon(e.icons.question), tooltip: f.options.help, click: a.createInvokeHandler('helpDialog.show') }).render());
    }, this.addImagePopoverButtons = function () { a.memo('button.imageSize100', () => c.button({ contents: '<span class="note-fontsize-10">100%</span>', tooltip: f.image.resizeFull, click: a.createInvokeHandler('editor.resize', '1') }).render()), a.memo('button.imageSize50', () => c.button({ contents: '<span class="note-fontsize-10">50%</span>', tooltip: f.image.resizeHalf, click: a.createInvokeHandler('editor.resize', '0.5') }).render()), a.memo('button.imageSize25', () => c.button({ contents: '<span class="note-fontsize-10">25%</span>', tooltip: f.image.resizeQuarter, click: a.createInvokeHandler('editor.resize', '0.25') }).render()), a.memo('button.floatLeft', () => c.button({ contents: c.icon(e.icons.alignLeft), tooltip: f.image.floatLeft, click: a.createInvokeHandler('editor.floatMe', 'left') }).render()), a.memo('button.floatRight', () => c.button({ contents: c.icon(e.icons.alignRight), tooltip: f.image.floatRight, click: a.createInvokeHandler('editor.floatMe', 'right') }).render()), a.memo('button.floatNone', () => c.button({ contents: c.icon(e.icons.alignJustify), tooltip: f.image.floatNone, click: a.createInvokeHandler('editor.floatMe', 'none') }).render()), a.memo('button.removeMedia', () => c.button({ contents: c.icon(e.icons.trash), tooltip: f.image.remove, click: a.createInvokeHandler('editor.removeMedia') }).render()); }, this.addLinkPopoverButtons = function () { a.memo('button.linkDialogShow', () => c.button({ contents: c.icon(e.icons.link), tooltip: f.link.edit, click: a.createInvokeHandler('linkDialog.show') }).render()), a.memo('button.unlink', () => c.button({ contents: c.icon(e.icons.unlink), tooltip: f.link.unlink, click: a.createInvokeHandler('editor.unlink') }).render()); }, this.build = function (b, d) { for (let e = 0, f = d.length; f > e; e++) { for (var g = d[e], h = g[0], i = g[1], j = c.buttonGroup({ className: `note-${h}` }).render(), k = 0, l = i.length; l > k; k++) { const m = a.memo(`button.${i[k]}`); m && j.append(typeof m === 'function' ? m(a) : m); }j.appendTo(b); } }, this.updateCurrentStyle = function () {
      const c = a.invoke('editor.currentStyle'); if (this.updateBtnStates({
        '.note-btn-bold': function () { return c['font-bold'] === 'bold'; }, '.note-btn-italic': function () { return c['font-italic'] === 'italic'; }, '.note-btn-underline': function () { return c['font-underline'] === 'underline'; }, '.note-btn-subscript': function () { return c['font-subscript'] === 'subscript'; }, '.note-btn-superscript': function () { return c['font-superscript'] === 'superscript'; }, '.note-btn-strikethrough': function () { return c['font-strikethrough'] === 'strikethrough'; },
      }), c['font-family']) { const e = c['font-family'].split(',').map((a) => a.replace(/[\'\"]/g, '').replace(/\s+$/, '').replace(/^\s+/, '')); const f = list.find(e, b.isFontInstalled); d.find('.dropdown-fontname li a').each(function () { const a = `${$(this).data('value')}` == `${f}`; this.className = a ? 'checked' : ''; }), d.find('.note-current-fontname').text(f); } if (c['font-size']) { const g = c['font-size']; d.find('.dropdown-fontsize li a').each(function () { const a = `${$(this).data('value')}` == `${g}`; this.className = a ? 'checked' : ''; }), d.find('.note-current-fontsize').text(g); } if (c['line-height']) { const h = c['line-height']; d.find('.dropdown-line-height li a').each(function () { const a = `${$(this).data('value')}` == `${h}`; this.className = a ? 'checked' : ''; }); }
    }, this.updateBtnStates = function (a) { $.each(a, (a, b) => { c.toggleBtnActive(d.find(a), b()); }); }, this.tableMoveHandler = function (a) { let b; const c = 18; const d = $(a.target.parentNode); const f = d.next(); const g = d.find('.note-dimension-picker-mousecatcher'); const h = d.find('.note-dimension-picker-highlighted'); const i = d.find('.note-dimension-picker-unhighlighted'); if (void 0 === a.offsetX) { const j = $(a.target).offset(); b = { x: a.pageX - j.left, y: a.pageY - j.top }; } else b = { x: a.offsetX, y: a.offsetY }; const k = { c: Math.ceil(b.x / c) || 1, r: Math.ceil(b.y / c) || 1 }; h.css({ width: `${k.c}em`, height: `${k.r}em` }), g.data('value', `${k.c}x${k.r}`), k.c > 3 && k.c < e.insertTableMaxSize.col && i.css({ width: `${k.c + 1}em` }), k.r > 3 && k.r < e.insertTableMaxSize.row && i.css({ height: `${k.r + 1}em` }), f.html(`${k.c} x ${k.r}`); };
  }; const Toolbar = function (a) { const b = $.summernote.ui; const c = a.layoutInfo.note; const d = a.layoutInfo.toolbar; const e = a.options; this.shouldInitialize = function () { return !e.airMode; }, this.initialize = function () { e.toolbar = e.toolbar || [], e.toolbar.length ? a.invoke('buttons.build', d, e.toolbar) : d.hide(), e.toolbarContainer && d.appendTo(e.toolbarContainer), c.on('summernote.keyup summernote.mouseup summernote.change', () => { a.invoke('buttons.updateCurrentStyle'); }), a.invoke('buttons.updateCurrentStyle'); }, this.destroy = function () { d.children().remove(); }, this.updateFullscreen = function (a) { b.toggleBtnActive(d.find('.btn-fullscreen'), a); }, this.updateCodeview = function (a) { b.toggleBtnActive(d.find('.btn-codeview'), a), a ? this.deactivate() : this.activate(); }, this.activate = function (a) { let c = d.find('button'); a || (c = c.not('.btn-codeview')), b.toggleBtn(c, !0); }, this.deactivate = function (a) { let c = d.find('button'); a || (c = c.not('.btn-codeview')), b.toggleBtn(c, !1); }; }; const LinkDialog = function (a) {
    const b = this; const c = $.summernote.ui; const d = a.layoutInfo.editor; const e = a.options; const f = e.langInfo; this.initialize = function () {
      const a = e.dialogsInBody ? $(document.body) : d; const b = `<div class="form-group"><label>${f.link.textToDisplay}</label><input class="note-link-text form-control" type="text" /></div><div class="form-group"><label>${f.link.url}</label><input class="note-link-url form-control" type="text" value="http://" /></div>${e.disableLinkTarget ? '' : `<div class="checkbox"><label><input type="checkbox" checked> ${f.link.openInNewWindow}</label></div>`}`; const g = `<button href="#" class="btn btn-primary note-link-btn disabled" disabled>${f.link.insert}</button>`; this.$dialog = c.dialog({
        className: 'link-dialog', title: f.link.insert, fade: e.dialogsFade, body: b, footer: g,
      }).render().appendTo(a);
    }, this.destroy = function () { c.hideDialog(this.$dialog), this.$dialog.remove(); }, this.bindEnterKey = function (a, b) { a.on('keypress', (a) => { a.keyCode === key.code.ENTER && b.trigger('click'); }); }, this.toggleLinkBtn = function (a, b, d) { c.toggleBtn(a, b.val() && d.val()); }, this.showLinkDialog = function (d) {
      return $.Deferred((e) => {
        const f = b.$dialog.find('.note-link-text'); const g = b.$dialog.find('.note-link-url'); const h = b.$dialog.find('.note-link-btn'); const i = b.$dialog.find('input[type=checkbox]'); c.onDialogShown(b.$dialog, () => {
          a.triggerEvent('dialog.shown'), d.url || (d.url = d.text), f.val(d.text); const c = function () { b.toggleLinkBtn(h, f, g), d.text = f.val(); }; f.on('input', c).on('paste', () => { setTimeout(c, 0); }); const j = function () { b.toggleLinkBtn(h, f, g), d.text || f.val(g.val()); }; g.on('input', j).on('paste', () => { setTimeout(j, 0); }).val(d.url).trigger('focus'), b.toggleLinkBtn(h, f, g), b.bindEnterKey(g, h), b.bindEnterKey(f, h), i.prop('checked', d.isNewWindow), h.one('click', (a) => {
            a.preventDefault(), e.resolve({
              range: d.range, url: g.val(), text: f.val(), isNewWindow: i.is(':checked'),
            }), b.$dialog.modal('hide');
          });
        }), c.onDialogHidden(b.$dialog, () => { f.off('input paste keypress'), g.off('input paste keypress'), h.off('click'), e.state() === 'pending' && e.reject(); }), c.showDialog(b.$dialog);
      }).promise();
    }, this.show = function () { const b = a.invoke('editor.getLinkInfo'); a.invoke('editor.saveRange'), this.showLinkDialog(b).then((b) => { a.invoke('editor.restoreRange'), a.invoke('editor.createLink', b); }).fail(() => { a.invoke('editor.restoreRange'); }); }, a.memo('help.linkDialog.show', e.langInfo.help['linkDialog.show']);
  }; const LinkPopover = function (a) { const b = this; const c = $.summernote.ui; const d = a.options; this.events = { 'summernote.keyup summernote.mouseup summernote.change summernote.scroll': function () { b.update(); }, 'summernote.dialog.shown': function () { b.hide(); } }, this.shouldInitialize = function () { return !list.isEmpty(d.popover.link); }, this.initialize = function () { this.$popover = c.popover({ className: 'note-link-popover', callback(a) { const b = a.find('.popover-content'); b.prepend('<span><a target="_blank"></a>&nbsp;</span>'); } }).render().appendTo('body'); const b = this.$popover.find('.popover-content'); a.invoke('buttons.build', b, d.popover.link); }, this.destroy = function () { this.$popover.remove(); }, this.update = function () { if (!a.invoke('editor.hasFocus')) return void this.hide(); const b = a.invoke('editor.createRange'); if (b.isCollapsed() && b.isOnAnchor()) { const c = dom.ancestor(b.sc, dom.isAnchor); const d = $(c).attr('href'); this.$popover.find('a').attr('href', d).html(d); const e = dom.posFromPlaceholder(c); this.$popover.css({ display: 'block', left: e.left, top: e.top }); } else this.hide(); }, this.hide = function () { this.$popover.hide(); }; }; const ImageDialog = function (a) {
    const b = this; const c = $.summernote.ui; const d = a.layoutInfo.editor; const e = a.options; const f = e.langInfo; this.initialize = function () {
      const a = e.dialogsInBody ? $(document.body) : d; let b = ''; if (e.maximumImageFileSize) { const g = Math.floor(Math.log(e.maximumImageFileSize) / Math.log(1024)); const h = `${1 * (e.maximumImageFileSize / Math.pow(1024, g)).toFixed(2)} ${' KMGTP'[g]}B`; b = `<small>${f.image.maximumFileSize} : ${h}</small>`; } const i = `<div class="form-group note-group-select-from-files"><label>${f.image.selectFromFiles}</label><input class="note-image-input form-control" type="file" name="files" accept="image/*" multiple="multiple" />${b}</div><div class="form-group note-group-image-url" style="overflow:auto;"><label>${f.image.url}</label><input class="note-image-url form-control col-md-12" type="text" /></div>`; const j = `<button href="#" class="btn btn-primary note-image-btn disabled" disabled>${f.image.insert}</button>`; this.$dialog = c.dialog({
        title: f.image.insert, fade: e.dialogsFade, body: i, footer: j,
      }).render().appendTo(a);
    }, this.destroy = function () { c.hideDialog(this.$dialog), this.$dialog.remove(); }, this.bindEnterKey = function (a, b) { a.on('keypress', (a) => { a.keyCode === key.code.ENTER && b.trigger('click'); }); }, this.show = function () { a.invoke('editor.saveRange'), this.showImageDialog().then((d) => { c.hideDialog(b.$dialog), a.invoke('editor.restoreRange'), typeof d === 'string' ? a.invoke('editor.insertImage', d) : a.invoke('editor.insertImagesOrCallback', d); }).fail(() => { a.invoke('editor.restoreRange'); }); }, this.showImageDialog = function () { return $.Deferred((d) => { const e = b.$dialog.find('.note-image-input'); const f = b.$dialog.find('.note-image-url'); const g = b.$dialog.find('.note-image-btn'); c.onDialogShown(b.$dialog, () => { a.triggerEvent('dialog.shown'), e.replaceWith(e.clone().on('change', function () { d.resolve(this.files || this.value); }).val('')), g.click((a) => { a.preventDefault(), d.resolve(f.val()); }), f.on('keyup paste', () => { const a = f.val(); c.toggleBtn(g, a); }).val('').trigger('focus'), b.bindEnterKey(f, g); }), c.onDialogHidden(b.$dialog, () => { e.off('change'), f.off('keyup paste keypress'), g.off('click'), d.state() === 'pending' && d.reject(); }), c.showDialog(b.$dialog); }); };
  }; const ImagePopover = function (a) { const b = $.summernote.ui; const c = a.options; this.shouldInitialize = function () { return !list.isEmpty(c.popover.image); }, this.initialize = function () { this.$popover = b.popover({ className: 'note-image-popover' }).render().appendTo('body'); const d = this.$popover.find('.popover-content'); a.invoke('buttons.build', d, c.popover.image); }, this.destroy = function () { this.$popover.remove(); }, this.update = function (a) { if (dom.isImg(a)) { const b = dom.posFromPlaceholder(a); this.$popover.css({ display: 'block', left: b.left, top: b.top }); } else this.hide(); }, this.hide = function () { this.$popover.hide(); }; }; const VideoDialog = function (a) {
    const b = this; const c = $.summernote.ui; const d = a.layoutInfo.editor; const e = a.options; const f = e.langInfo; this.initialize = function () {
      const a = e.dialogsInBody ? $(document.body) : d; const b = `<div class="form-group row-fluid"><label>${f.video.url} <small class="text-muted">${f.video.providers}</small></label><input class="note-video-url form-control span12" type="text" /></div>`; const g = `<button href="#" class="btn btn-primary note-video-btn disabled" disabled>${f.video.insert}</button>`; this.$dialog = c.dialog({
        title: f.video.insert, fade: e.dialogsFade, body: b, footer: g,
      }).render().appendTo(a);
    }, this.destroy = function () { c.hideDialog(this.$dialog), this.$dialog.remove(); }, this.bindEnterKey = function (a, b) { a.on('keypress', (a) => { a.keyCode === key.code.ENTER && b.trigger('click'); }); }, this.createVideoNode = function (a) {
      let b; const c = /^(?:https?:\/\/)?(?:www\.)?(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=))((\w|-){11})(?:\S+)?$/; const d = a.match(c); const e = /(?:www\.|\/\/)instagram\.com\/p\/(.[a-zA-Z0-9_-]*)/; const f = a.match(e); const g = /\/\/vine\.co\/v\/([a-zA-Z0-9]+)/; const h = a.match(g); const i = /\/\/(player\.)?vimeo\.com\/([a-z]*\/)*([0-9]{6,11})[?]?.*/; const j = a.match(i); const k = /.+dailymotion.com\/(video|hub)\/([^_]+)[^#]*(#video=([^_&]+))?/; const l = a.match(k); const m = /\/\/v\.youku\.com\/v_show\/id_(\w+)=*\.html/; const n = a.match(m); const o = /^.+.(mp4|m4v)$/; const p = a.match(o); const q = /^.+.(ogg|ogv)$/; const r = a.match(q); const s = /^.+.(webm)$/; const t = a.match(s); if (d && d[1].length === 11) {
        const u = d[1]; b = $('<iframe>').attr('frameborder', 0).attr('src', `//www.youtube.com/embed/${u}`).attr('width', '640')
          .attr('height', '360');
      } else if (f && f[0].length) {
        b = $('<iframe>').attr('frameborder', 0).attr('src', `https://instagram.com/p/${f[1]}/embed/`).attr('width', '612')
          .attr('height', '710')
          .attr('scrolling', 'no')
          .attr('allowtransparency', 'true');
      } else if (h && h[0].length) {
        b = $('<iframe>').attr('frameborder', 0).attr('src', `${h[0]}/embed/simple`).attr('width', '600')
          .attr('height', '600')
          .attr('class', 'vine-embed');
      } else if (j && j[3].length) {
        b = $('<iframe webkitallowfullscreen mozallowfullscreen allowfullscreen>').attr('frameborder', 0).attr('src', `//player.vimeo.com/video/${j[3]}`).attr('width', '640')
          .attr('height', '360');
      } else if (l && l[2].length) {
        b = $('<iframe>').attr('frameborder', 0).attr('src', `//www.dailymotion.com/embed/video/${l[2]}`).attr('width', '640')
          .attr('height', '360');
      } else if (n && n[1].length) {
        b = $('<iframe webkitallowfullscreen mozallowfullscreen allowfullscreen>').attr('frameborder', 0).attr('height', '498').attr('width', '510')
          .attr('src', `//player.youku.com/embed/${n[1]}`);
      } else { if (!(p || r || t)) return !1; b = $('<video controls>').attr('src', a).attr('width', '640').attr('height', '360'); } return b.addClass('note-video-clip'), b[0];
    }, this.show = function () { const d = a.invoke('editor.getSelectedText'); a.invoke('editor.saveRange'), this.showVideoDialog(d).then((d) => { c.hideDialog(b.$dialog), a.invoke('editor.restoreRange'); const e = b.createVideoNode(d); e && a.invoke('editor.insertNode', e); }).fail(() => { a.invoke('editor.restoreRange'); }); }, this.showVideoDialog = function (d) { return $.Deferred((e) => { const f = b.$dialog.find('.note-video-url'); const g = b.$dialog.find('.note-video-btn'); c.onDialogShown(b.$dialog, () => { a.triggerEvent('dialog.shown'), f.val(d).on('input', () => { c.toggleBtn(g, f.val()); }).trigger('focus'), g.click((a) => { a.preventDefault(), e.resolve(f.val()); }), b.bindEnterKey(f, g); }), c.onDialogHidden(b.$dialog, () => { f.off('input'), g.off('click'), e.state() === 'pending' && e.reject(); }), c.showDialog(b.$dialog); }); };
  }; const HelpDialog = function (a) {
    const b = this; const c = $.summernote.ui; const d = a.layoutInfo.editor; const e = a.options; const f = e.langInfo; this.createShortCutList = function () { const b = e.keyMap[agent.isMac ? 'mac' : 'pc']; return Object.keys(b).map((c) => { const d = b[c]; const e = $('<div><div class="help-list-item"/></div>'); return e.append($(`<label><kbd>${c}</kdb></label>`).css({ width: 180, 'margin-right': 10 })).append($('<span/>').html(a.memo(`help.${d}`) || d)), e.html(); }).join(''); }, this.initialize = function () {
      const a = e.dialogsInBody ? $(document.body) : d; const b = ['<p class="text-center">', '<a href="http://summernote.org/" target="_blank">Summernote 0.8.2</a> · ', '<a href="https://github.com/summernote/summernote" target="_blank">Project</a> · ', '<a href="https://github.com/summernote/summernote/issues" target="_blank">Issues</a>', '</p>'].join(''); this.$dialog = c.dialog({
        title: f.options.help, fade: e.dialogsFade, body: this.createShortCutList(), footer: b, callback(a) { a.find('.modal-body').css({ 'max-height': 300, overflow: 'scroll' }); },
      }).render().appendTo(a);
    }, this.destroy = function () { c.hideDialog(this.$dialog), this.$dialog.remove(); }, this.showHelpDialog = function () { return $.Deferred((d) => { c.onDialogShown(b.$dialog, () => { a.triggerEvent('dialog.shown'), d.resolve(); }), c.showDialog(b.$dialog); }).promise(); }, this.show = function () { a.invoke('editor.saveRange'), this.showHelpDialog().then(() => { a.invoke('editor.restoreRange'); }); };
  }; const AirPopover = function (a) { const b = this; const c = $.summernote.ui; const d = a.options; const e = 20; this.events = { 'summernote.keyup summernote.mouseup summernote.scroll': function () { b.update(); }, 'summernote.change summernote.dialog.shown': function () { b.hide(); }, 'summernote.focusout': function (a, c) { agent.isFF || c.relatedTarget && dom.ancestor(c.relatedTarget, func.eq(b.$popover[0])) || b.hide(); } }, this.shouldInitialize = function () { return d.airMode && !list.isEmpty(d.popover.air); }, this.initialize = function () { this.$popover = c.popover({ className: 'note-air-popover' }).render().appendTo('body'); const b = this.$popover.find('.popover-content'); a.invoke('buttons.build', b, d.popover.air); }, this.destroy = function () { this.$popover.remove(); }, this.update = function () { const b = a.invoke('editor.currentStyle'); if (b.range && !b.range.isCollapsed()) { const c = list.last(b.range.getClientRects()); if (c) { const d = func.rect2bnd(c); this.$popover.css({ display: 'block', left: Math.max(d.left + d.width / 2, 0) - e, top: d.top + d.height }); } } else this.hide(); }, this.hide = function () { this.$popover.hide(); }; }; const HintPopover = function (a) { const b = this; const c = $.summernote.ui; const d = 5; const e = a.options.hint || []; const f = a.options.hintDirection || 'bottom'; const g = $.isArray(e) ? e : [e]; this.events = { 'summernote.keyup': function (a, c) { c.isDefaultPrevented() || b.handleKeyup(c); }, 'summernote.keydown': function (a, c) { b.handleKeydown(c); }, 'summernote.dialog.shown': function () { b.hide(); } }, this.shouldInitialize = function () { return g.length > 0; }, this.initialize = function () { this.lastWordRange = null, this.$popover = c.popover({ className: 'note-hint-popover', hideArrow: !0, direction: '' }).render().appendTo('body'), this.$popover.hide(), this.$content = this.$popover.find('.popover-content'), this.$content.on('click', '.note-hint-item', function () { b.$content.find('.active').removeClass('active'), $(this).addClass('active'), b.replace(); }); }, this.destroy = function () { this.$popover.remove(); }, this.selectItem = function (a) { this.$content.find('.active').removeClass('active'), a.addClass('active'), this.$content[0].scrollTop = a[0].offsetTop - this.$content.innerHeight() / 2; }, this.moveDown = function () { const a = this.$content.find('.note-hint-item.active'); const b = a.next(); if (b.length) this.selectItem(b); else { let c = a.parent().next(); c.length || (c = this.$content.find('.note-hint-group').first()), this.selectItem(c.find('.note-hint-item').first()); } }, this.moveUp = function () { const a = this.$content.find('.note-hint-item.active'); const b = a.prev(); if (b.length) this.selectItem(b); else { let c = a.parent().prev(); c.length || (c = this.$content.find('.note-hint-group').last()), this.selectItem(c.find('.note-hint-item').last()); } }, this.replace = function () { const b = this.$content.find('.note-hint-item.active'); if (b.length) { const c = this.nodeFromItem(b); this.lastWordRange.insertNode(c), range.createFromNode(c).collapse().select(), this.lastWordRange = null, this.hide(), a.invoke('editor.focus'); } }, this.nodeFromItem = function (a) { const b = g[a.data('index')]; const c = a.data('item'); let d = b.content ? b.content(c) : c; return typeof d === 'string' && (d = dom.createText(d)), d; }, this.createItemTemplates = function (a, b) { const c = g[a]; return b.map((b, d) => { const e = $('<div class="note-hint-item"/>'); return e.append(c.template ? c.template(b) : `${b}`), e.data({ index: a, item: b }), a === 0 && d === 0 && e.addClass('active'), e; }); }, this.handleKeydown = function (a) { this.$popover.is(':visible') && (a.keyCode === key.code.ENTER ? (a.preventDefault(), this.replace()) : a.keyCode === key.code.UP ? (a.preventDefault(), this.moveUp()) : a.keyCode === key.code.DOWN && (a.preventDefault(), this.moveDown())); }, this.searchKeyword = function (a, b, c) { const d = g[a]; if (d && d.match.test(b) && d.search) { const e = d.match.exec(b); d.search(e[1], c); } else c(); }, this.createGroup = function (a, c) { const d = $(`<div class="note-hint-group note-hint-group-${a}"/>`); return this.searchKeyword(a, c, (c) => { c = c || [], c.length && (d.html(b.createItemTemplates(a, c)), b.show()); }), d; }, this.handleKeyup = function (c) { if (list.contains([key.code.ENTER, key.code.UP, key.code.DOWN], c.keyCode)) { if (c.keyCode === key.code.ENTER && this.$popover.is(':visible')) return; } else { const e = a.invoke('editor.createRange').getWordRange(); const h = e.toString(); if (g.length && h) { this.$content.empty(); const i = func.rect2bnd(list.last(e.getClientRects())); i && (this.$popover.hide(), this.lastWordRange = e, g.forEach((a, c) => { a.match.test(h) && b.createGroup(c, h).appendTo(b.$content); }), f === 'top' ? this.$popover.css({ left: i.left, top: i.top - this.$popover.outerHeight() - d }) : this.$popover.css({ left: i.left, top: i.top + i.height + d })); } else this.hide(); } }, this.show = function () { this.$popover.show(); }, this.hide = function () { this.$popover.hide(); }; }; $.summernote = $.extend($.summernote, {
    version: '0.8.2',
    ui,
    dom,
    plugins: {},
    options: {
      modules: {
        editor: Editor, clipboard: Clipboard, dropzone: Dropzone, codeview: Codeview, statusbar: Statusbar, fullscreen: Fullscreen, handle: Handle, hintPopover: HintPopover, autoLink: AutoLink, autoSync: AutoSync, placeholder: Placeholder, buttons: Buttons, toolbar: Toolbar, linkDialog: LinkDialog, linkPopover: LinkPopover, imageDialog: ImageDialog, imagePopover: ImagePopover, videoDialog: VideoDialog, helpDialog: HelpDialog, airPopover: AirPopover,
      },
      buttons: {},
      lang: 'en-US',
      toolbar: [['style', ['style']], ['font', ['bold', 'underline', 'clear']], ['fontname', ['fontname']], ['color', ['color']], ['para', ['ul', 'ol', 'paragraph']], ['table', ['table']], ['insert', ['link', 'picture', 'video']], ['view', ['fullscreen', 'codeview', 'help']]],
      popover: { image: [['imagesize', ['imageSize100', 'imageSize50', 'imageSize25']], ['float', ['floatLeft', 'floatRight', 'floatNone']], ['remove', ['removeMedia']]], link: [['link', ['linkDialogShow', 'unlink']]], air: [['color', ['color']], ['font', ['bold', 'underline', 'clear']], ['para', ['ul', 'paragraph']], ['table', ['table']], ['insert', ['link', 'picture']]] },
      airMode: !1,
      width: null,
      height: null,
      focus: !1,
      tabSize: 4,
      styleWithSpan: !0,
      shortcuts: !0,
      textareaAutoSync: !0,
      direction: null,
      styleTags: ['p', 'blockquote', 'pre', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'],
      fontNames: ['Arial', 'Arial Black', 'Comic Sans MS', 'Courier New', 'Helvetica Neue', 'Helvetica', 'Impact', 'Lucida Grande', 'Tahoma', 'Times New Roman', 'Verdana'],
      fontSizes: ['8', '9', '10', '11', '12', '14', '18', '24', '36'],
      colors: [['#000000', '#424242', '#636363', '#9C9C94', '#CEC6CE', '#EFEFEF', '#F7F7F7', '#FFFFFF'], ['#FF0000', '#FF9C00', '#FFFF00', '#00FF00', '#00FFFF', '#0000FF', '#9C00FF', '#FF00FF'], ['#F7C6CE', '#FFE7CE', '#FFEFC6', '#D6EFD6', '#CEDEE7', '#CEE7F7', '#D6D6E7', '#E7D6DE'], ['#E79C9C', '#FFC69C', '#FFE79C', '#B5D6A5', '#A5C6CE', '#9CC6EF', '#B5A5D6', '#D6A5BD'], ['#E76363', '#F7AD6B', '#FFD663', '#94BD7B', '#73A5AD', '#6BADDE', '#8C7BC6', '#C67BA5'], ['#CE0000', '#E79439', '#EFC631', '#6BA54A', '#4A7B8C', '#3984C6', '#634AA5', '#A54A7B'], ['#9C0000', '#B56308', '#BD9400', '#397B21', '#104A5A', '#085294', '#311873', '#731842'], ['#630000', '#7B3900', '#846300', '#295218', '#083139', '#003163', '#21104A', '#4A1031']],
      lineHeights: ['1.0', '1.2', '1.4', '1.5', '1.6', '1.8', '2.0', '3.0'],
      tableClassName: 'table table-bordered',
      insertTableMaxSize: { col: 10, row: 10 },
      dialogsInBody: !1,
      dialogsFade: !1,
      maximumImageFileSize: null,
      callbacks: {
        onInit: null, onFocus: null, onBlur: null, onEnter: null, onKeyup: null, onKeydown: null, onImageUpload: null, onImageUploadError: null,
      },
      codemirror: { mode: 'text/html', htmlMode: !0, lineNumbers: !0 },
      keyMap: {
        pc: {
          ENTER: 'insertParagraph', 'CTRL+Z': 'undo', 'CTRL+Y': 'redo', TAB: 'tab', 'SHIFT+TAB': 'untab', 'CTRL+B': 'bold', 'CTRL+I': 'italic', 'CTRL+U': 'underline', 'CTRL+SHIFT+S': 'strikethrough', 'CTRL+BACKSLASH': 'removeFormat', 'CTRL+SHIFT+L': 'justifyLeft', 'CTRL+SHIFT+E': 'justifyCenter', 'CTRL+SHIFT+R': 'justifyRight', 'CTRL+SHIFT+J': 'justifyFull', 'CTRL+SHIFT+NUM7': 'insertUnorderedList', 'CTRL+SHIFT+NUM8': 'insertOrderedList', 'CTRL+LEFTBRACKET': 'outdent', 'CTRL+RIGHTBRACKET': 'indent', 'CTRL+NUM0': 'formatPara', 'CTRL+NUM1': 'formatH1', 'CTRL+NUM2': 'formatH2', 'CTRL+NUM3': 'formatH3', 'CTRL+NUM4': 'formatH4', 'CTRL+NUM5': 'formatH5', 'CTRL+NUM6': 'formatH6', 'CTRL+ENTER': 'insertHorizontalRule', 'CTRL+K': 'linkDialog.show',
        },
        mac: {
          ENTER: 'insertParagraph', 'CMD+Z': 'undo', 'CMD+SHIFT+Z': 'redo', TAB: 'tab', 'SHIFT+TAB': 'untab', 'CMD+B': 'bold', 'CMD+I': 'italic', 'CMD+U': 'underline', 'CMD+SHIFT+S': 'strikethrough', 'CMD+BACKSLASH': 'removeFormat', 'CMD+SHIFT+L': 'justifyLeft', 'CMD+SHIFT+E': 'justifyCenter', 'CMD+SHIFT+R': 'justifyRight', 'CMD+SHIFT+J': 'justifyFull', 'CMD+SHIFT+NUM7': 'insertUnorderedList', 'CMD+SHIFT+NUM8': 'insertOrderedList', 'CMD+LEFTBRACKET': 'outdent', 'CMD+RIGHTBRACKET': 'indent', 'CMD+NUM0': 'formatPara', 'CMD+NUM1': 'formatH1', 'CMD+NUM2': 'formatH2', 'CMD+NUM3': 'formatH3', 'CMD+NUM4': 'formatH4', 'CMD+NUM5': 'formatH5', 'CMD+NUM6': 'formatH6', 'CMD+ENTER': 'insertHorizontalRule', 'CMD+K': 'linkDialog.show',
        },
      },
      icons: {
        align: 'note-icon-align', alignCenter: 'note-icon-align-center', alignJustify: 'note-icon-align-justify', alignLeft: 'note-icon-align-left', alignRight: 'note-icon-align-right', indent: 'note-icon-align-indent', outdent: 'note-icon-align-outdent', arrowsAlt: 'note-icon-arrows-alt', bold: 'note-icon-bold', caret: 'note-icon-caret', circle: 'note-icon-circle', close: 'note-icon-close', code: 'note-icon-code', eraser: 'note-icon-eraser', font: 'note-icon-font', frame: 'note-icon-frame', italic: 'note-icon-italic', link: 'note-icon-link', unlink: 'note-icon-chain-broken', magic: 'note-icon-magic', menuCheck: 'note-icon-check', minus: 'note-icon-minus', orderedlist: 'note-icon-orderedlist', pencil: 'note-icon-pencil', picture: 'note-icon-picture', question: 'note-icon-question', redo: 'note-icon-redo', square: 'note-icon-square', strikethrough: 'note-icon-strikethrough', subscript: 'note-icon-subscript', superscript: 'note-icon-superscript', table: 'note-icon-table', textHeight: 'note-icon-text-height', trash: 'note-icon-trash', underline: 'note-icon-underline', undo: 'note-icon-undo', unorderedlist: 'note-icon-unorderedlist', video: 'note-icon-video',
      },
    },
  });
}));
