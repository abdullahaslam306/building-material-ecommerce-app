(function (g) { typeof define === 'function' && define.amd ? define(['jquery', 'datatables.net', 'datatables.net-buttons'], (d) => g(d, window, document)) : typeof exports === 'object' ? module.exports = function (d, e) { d || (d = window); if (!e || !e.fn.dataTable)e = require('datatables.net')(d, e).$; e.fn.dataTable.Buttons || require('datatables.net-buttons')(d, e); return g(e, d, d.document); } : g(jQuery, window, document); }((g, d, e, h) => {
  d = g.fn.dataTable; g.extend(d.ext.buttons, {
    colvis(a, b) {
      return {
        extend: 'collection',
        text(a) { return a.i18n('buttons.colvis', 'Column visibility'); },
        className: 'buttons-colvis',
        buttons: [{ extend: 'columnsToggle', columns: b.columns }],
      };
    },
    columnsToggle(a, b) { return a.columns(b.columns).indexes().map((a) => ({ extend: 'columnToggle', columns: a })).toArray(); },
    columnToggle(a, b) { return { extend: 'columnVisibility', columns: b.columns }; },
    columnsVisibility(a, b) { return a.columns(b.columns).indexes().map((a) => ({ extend: 'columnVisibility', columns: a, visibility: b.visibility })).toArray(); },
    columnVisibility: {
      columns: h,
      text(a, b, c) { return c._columnText(a, c.columns); },
      className: 'buttons-columnVisibility',
      action(a, b, c, f) { a = b.columns(f.columns); b = a.visible(); a.visible(f.visibility !== h ? f.visibility : !(b.length && b[0])); },
      init(a, b, c) {
        const f = this; const d = a.column(c.columns); a.on(`column-visibility.dt${c.namespace}`, (a, b) => { b.bDestroying || f.active(d.visible()); }).on(`column-reorder.dt${c.namespace}`, (b, d, e) => {
          a.columns(c.columns).count() === 1 && (typeof c.columns === 'number'
&& (c.columns = e.mapping[c.columns]), b = a.column(c.columns), f.text(c._columnText(a, c.columns)), f.active(b.visible()));
        }); this.active(d.visible());
      },
      destroy(a, b, c) { a.off(`column-visibility.dt${c.namespace}`).off(`column-reorder.dt${c.namespace}`); },
      _columnText(a, b) { const c = a.column(b).index(); return a.settings()[0].aoColumns[c].sTitle.replace(/\n/g, ' ').replace(/<.*?>/g, '').replace(/^\s+|\s+$/g, ''); },
    },
    colvisRestore: {
      className: 'buttons-colvisRestore',
      text(a) {
        return a.i18n('buttons.colvisRestore',
          'Restore visibility');
      },
      init(a, b, c) { c._visOriginal = a.columns().indexes().map((b) => a.column(b).visible()).toArray(); },
      action(a, b, c, d) { b.columns().every(function (a) { a = b.colReorder && b.colReorder.transpose ? b.colReorder.transpose(a, 'toOriginal') : a; this.visible(d._visOriginal[a]); }); },
    },
    colvisGroup: {
      className: 'buttons-colvisGroup', action(a, b, c, d) { b.columns(d.show).visible(!0, !1); b.columns(d.hide).visible(!1, !1); b.columns.adjust(); }, show: [], hide: [],
    },
  }); return d.Buttons;
}));
