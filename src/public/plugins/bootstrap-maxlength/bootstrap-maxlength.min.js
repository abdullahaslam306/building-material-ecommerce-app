/* ==========================================================
 *
 * bootstrap-maxlength.js v 1.6.0
 * Copyright 2015 Maurizio Napoleoni @mimonap
 * Licensed under MIT License
 * URL: https://github.com/mimo84/bootstrap-maxlength/blob/master/LICENSE
 *
 * ========================================================== */

!(function (a) {
  a.event.special.destroyed || (a.event.special.destroyed = { remove(a) { a.handler && a.handler(); } }), a.fn.extend({
    maxlength(b, c) {
      function d(a) { let c = a.val(); c = b.twoCharLinebreak ? c.replace(/\r(?!\n)|\n(?!\r)/g, '\r\n') : c.replace(new RegExp('\r?\n', 'g'), '\n'); let d = 0; return d = b.utf8 ? f(c) : c.length; } function e(a, c) { let d = a.val(); let e = 0; b.twoCharLinebreak && (d = d.replace(/\r(?!\n)|\n(?!\r)/g, '\r\n'), d.substr(d.length - 1) === '\n' && d.length % 2 === 1 && (e = 1)), a.val(d.substr(0, c - e)); } function f(a) { for (var b = 0, c = 0; c < a.length; c++) { const d = a.charCodeAt(c); d < 128 ? b++ : b += d > 127 && d < 2048 ? 2 : 3; } return b; } function g(a, c, e) { let f = !0; return !b.alwaysShow && e - d(a) > c && (f = !1), f; } function h(a, b) { const c = b - d(a); return c; } function i(a, b) { b.css({ display: 'block' }), a.trigger('maxlength.shown'); } function j(a, b) { b.css({ display: 'none' }), a.trigger('maxlength.hidden'); } function k(a, c, d) { let e = ''; return b.message ? e = typeof b.message === 'function' ? b.message(a, c) : b.message.replace('%charsTyped%', d).replace('%charsRemaining%', c - d).replace('%charsTotal%', c) : (b.preText && (e += b.preText), e += b.showCharsTyped ? d : c - d, b.showMaxLength && (e += b.separator + c), b.postText && (e += b.postText)), e; } function l(a, c, d, e) { e && (e.html(k(c.val(), d, d - a)), a > 0 ? g(c, b.threshold, d) ? i(c, e.removeClass(b.limitReachedClass).addClass(b.warningClass)) : j(c, e) : i(c, e.removeClass(b.warningClass).addClass(b.limitReachedClass))), b.allowOverMax && (a < 0 ? c.addClass('overmax') : c.removeClass('overmax')); } function m(b) { const c = b[0]; return a.extend({}, typeof c.getBoundingClientRect === 'function' ? c.getBoundingClientRect() : { width: c.offsetWidth, height: c.offsetHeight }, b.offset()); } function n(c, d) { const e = m(c); if (a.type(b.placement) === 'function') return void b.placement(c, d, e); if (a.isPlainObject(b.placement)) return void o(b.placement, d); const f = c.outerWidth(); const g = d.outerWidth(); const h = d.width(); const i = d.height(); switch (b.appendToParent && (e.top -= c.parent().offset().top, e.left -= c.parent().offset().left), b.placement) { case 'bottom': d.css({ top: e.top + e.height, left: e.left + e.width / 2 - h / 2 }); break; case 'top': d.css({ top: e.top - i, left: e.left + e.width / 2 - h / 2 }); break; case 'left': d.css({ top: e.top + e.height / 2 - i / 2, left: e.left - h }); break; case 'right': d.css({ top: e.top + e.height / 2 - i / 2, left: e.left + e.width }); break; case 'bottom-right': d.css({ top: e.top + e.height, left: e.left + e.width }); break; case 'top-right': d.css({ top: e.top - i, left: e.left + f }); break; case 'top-left': d.css({ top: e.top - i, left: e.left - g }); break; case 'bottom-left': d.css({ top: e.top + c.outerHeight(), left: e.left - g }); break; case 'centered-right': d.css({ top: e.top + i / 2, left: e.left + f - g - 3 }); break; case 'bottom-right-inside': d.css({ top: e.top + e.height, left: e.left + e.width - g }); break; case 'top-right-inside': d.css({ top: e.top - i, left: e.left + f - g }); break; case 'top-left-inside': d.css({ top: e.top - i, left: e.left }); break; case 'bottom-left-inside': d.css({ top: e.top + c.outerHeight(), left: e.left }); } } function o(c, d) { if (c && d) { const e = ['top', 'bottom', 'left', 'right', 'position']; const f = {}; a.each(e, (a, c) => { const d = b.placement[c]; typeof d !== 'undefined' && (f[c] = d); }), d.css(f); } } function p(a) { let c = 'maxlength'; return b.allowOverMax && (c = 'data-bs-mxl'), a.attr(c) || a.attr('size'); } const q = a('body'); const r = {
        showOnReady: !1, alwaysShow: !1, threshold: 10, warningClass: 'label label-success', limitReachedClass: 'label label-important label-danger', separator: ' / ', preText: '', postText: '', showMaxLength: !0, placement: 'bottom', message: null, showCharsTyped: !0, validate: !1, utf8: !1, appendToParent: !1, twoCharLinebreak: !0, allowOverMax: !1,
      }; return a.isFunction(b) && !c && (c = b, b = {}), b = a.extend(r, b), this.each(function () {
        function c() {
          const c = k(g.val(), d, '0'); d = p(g), f || (f = a('<span class="bootstrap-maxlength"></span>').css({
            display: 'none', position: 'absolute', whiteSpace: 'nowrap', zIndex: 1099,
          }).html(c)), g.is('textarea') && (g.data('maxlenghtsizex', g.outerWidth()), g.data('maxlenghtsizey', g.outerHeight()), g.mouseup(() => { (g.outerWidth() !== g.data('maxlenghtsizex') || g.outerHeight() !== g.data('maxlenghtsizey')) && n(g, f), g.data('maxlenghtsizex', g.outerWidth()), g.data('maxlenghtsizey', g.outerHeight()); })), b.appendToParent ? (g.parent().append(f), g.parent().css('position', 'relative')) : q.append(f); const e = h(g, p(g)); l(e, g, d, f), n(g, f);
        } let d; let f; var g = a(this); a(window).resize(() => { f && n(g, f); }), b.allowOverMax && (a(this).attr('data-bs-mxl', a(this).attr('maxlength')), a(this).removeAttr('maxlength')), b.showOnReady ? g.ready(() => { c(); }) : g.focus(() => { c(); }), g.on('maxlength.reposition', () => { n(g, f); }), g.on('destroyed', () => { f && f.remove(); }), g.on('blur', () => { f && !b.showOnReady && f.remove(); }), g.on('input', () => { const a = p(g); const c = h(g, a); let i = !0; return b.validate && c < 0 ? (e(g, a), i = !1) : l(c, g, d, f), (b.placement === 'bottom-right-inside' || b.placement === 'top-right-inside') && n(g, f), i; });
      });
    },
  });
}(jQuery));
